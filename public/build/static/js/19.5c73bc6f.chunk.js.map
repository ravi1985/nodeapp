{"version":3,"sources":["containers/Attributes/add.jsx"],"names":["Add","props","_this","Object","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","isEdit","state","initialState","formValidation","validation","attribute","Form","getInstance","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","fields","dispatch","save","views","uploadOptionImage","textValues","handleInputFieldBlur","bind","e","preventDefault","data","newProps","isFetching","isError","response","records","promize_attribute_values","attribute_type","promize_attribute_clipart_values","tempObj","clipart_name","clipart_price","clipart_sku","promize_domain_clipart_category_id","promize_attribute_id","promize_attribute_image_values","image_name","image_code","image_price","image_sku","min_upload_size","max_upload_size","image_format","additional_data","promize_attribute_text_values","text_name","font_ids","default_font_family","font_size_ids","default_font_size","font_color_ids","default_color","status","text_sku","text_price","setState","attribute_saved","statusValue","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_Forms__WEBPACK_IMPORTED_MODULE_9__","assign","currentComponent","form","title","reset","Component","connect"],"mappings":"sNAQMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,QAAS,EACdP,EAAKQ,MAAQC,cACbT,EAAKS,aAAeA,cACpB,IAAMC,EAAiBC,YAAWZ,GALnB,OAMfC,EAAKY,UAAYC,IAAKC,YAALb,OAAAc,EAAA,EAAAd,CAAAD,GACRU,EACL,SAACM,GACGhB,EAAKD,MAAMkB,SAASC,YAAKF,KAE7B,SAACG,GACGnB,EAAKD,MAAMkB,SAASG,YAAkBD,EAAO,kBAAmB,iBAEpE,IAEJnB,EAAKqB,WAAaR,IAAKC,YAALb,OAAAc,EAAA,EAAAd,CAAAD,GACRU,EACN,SAACM,GACGhB,EAAKD,MAAMkB,SAASC,YAAKF,KAE7B,IAEJhB,EAAKsB,qBAAuBtB,EAAKsB,qBAAqBC,KAA1BtB,OAAAc,EAAA,EAAAd,CAAAD,IAvBbA,oFA8BEwB,GACjBA,EAAEC,iBACF,IAAIC,EAAOvB,KAAKK,MAAMQ,OACtBb,KAAKJ,MAAMkB,SAASC,YAAKQ,sDAGHC,GACtB,IAAIA,EAASf,UAAUgB,aAAeD,EAASf,UAAUiB,SAAW1B,KAAKJ,MAAMa,UAAUgB,aAAeD,EAASf,UAAUgB,WAAW,CAC9H,IAAIZ,EAASW,EAASf,UAAUkB,SAASC,QAEzC,GADAf,EAAOgB,yBAA2B7B,KAAKK,MAAMQ,OAAOgB,yBACxB,WAAzBhB,EAAOiB,eAA4B,CAClCjB,EAAOkB,iCAAmC,GAC1C,IAAIC,EAAU,CACVC,aAAiB,GACjBC,cAAkB,KAClBC,YAAgB,KAChBC,mCAAuC,GACvCC,qBAAyBxB,EAAOwB,sBAEpCxB,EAAOkB,iCAAmCC,OACxC,GAA4B,SAAzBnB,EAAOiB,eAA0B,CACtCjB,EAAOyB,+BAAiC,GACxC,IAAIN,EAAU,CACVO,WAAe,GACfC,WAAe,GACfC,YAAgB,KAChBC,UAAc,GACdC,gBAAoB,KACpBC,gBAAoB,KACpBC,aAAiB,GACjBC,gBAAoB,GACpBT,qBAAyBxB,EAAOwB,sBAEpCxB,EAAOyB,+BAAiCN,OACtC,GAA4B,QAAzBnB,EAAOiB,eAAyB,CACrCjB,EAAOkC,8BAAgC,GACvC,IAAIf,EAAU,CACVK,qBAAwBxB,EAAOwB,qBAC/BW,UAAY,GACZC,SAAW,GACXC,oBAAuB,GACvBC,cAAgB,GAChBC,kBAAoB,GACpBC,eAAiB,GACjBC,cAAgB,GAKhBC,OAAS,EACTC,SAAW,GACXC,WAAa,MAEjB5C,EAAOkC,8BAAgCf,EAE3ChC,KAAK0D,SAAS,CAACC,iBAAkB,EAAM9C,OAAOA,sCASlD,IACIJ,EAAcT,KAAKJ,MAAnBa,UACAS,EAAelB,KAAKJ,MAApBsB,WACJ0C,EAA2C,GAA5B5D,KAAKK,MAAMQ,OAAO0C,OACrC,OAAOM,EAAAC,EAAAC,cAACC,EAAA,EAADlE,OAAAmE,OAAA,GAAWjE,KAAKJ,MAAhB,CAAuBsE,iBAAkBlE,KAAMmE,KAAMnE,KAAKS,UAAWA,UAAWA,EAAWS,WAAYA,EAAYb,MAAOL,KAAKK,MAAO+D,MAAO,gBAAiBjD,qBAAsBnB,KAAKmB,qBAAsBkD,MAAOrE,KAAKM,aAAcF,QAAQ,EAAOwD,YAAaA,YAnGlQU,aA8GHC,sBAPf,SAAyBlE,GAErB,MAAO,CACHI,UAF6BJ,EAAzBI,UAEOS,WAFkBb,EAAda,aAMRqD,CAAyB5E","file":"static/js/19.5c73bc6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport toastr from 'toastr';\nimport { connect } from 'react-redux';\nimport Forms, { initialState, validation } from './Forms';\nimport { save, uploadOptionImage } from '../../actions/attributes';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Form from '../../utility/Form';\n\nclass Add extends Component {\n    constructor(props) {\n        super(props);\n        this.isEdit = false;\n        this.state = initialState();\n        this.initialState = initialState();\n        const formValidation = validation(props);\n        this.attribute = Form.getInstance(\n            this,formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields))\n            },\n            (views) => {\n                this.props.dispatch(uploadOptionImage(views, 'attribute_image', 'imageUpload'))\n            },\n            {}\n        );  \n        this.textValues = Form.getInstance(\n            this, formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields))\n            },\n            {}\n        );  \n        this.handleInputFieldBlur = this.handleInputFieldBlur.bind(this);\n    }\n          /**\n     * Handle Filed Blur\n     * @param {HtmlEvent | Object} e Html Elemet\n     * @param {string} fieldName Field Name\n     */\n    handleInputFieldBlur(e){\n        e.preventDefault();\n        let data = this.state.fields;\n        this.props.dispatch(save(data));\n    }\n\n    componentWillReceiveProps(newProps) {\n        if(!newProps.attribute.isFetching && !newProps.attribute.isError && this.props.attribute.isFetching !== newProps.attribute.isFetching){\n                let fields = newProps.attribute.response.records;\n                fields.promize_attribute_values = this.state.fields.promize_attribute_values;\n                if(fields.attribute_type == \"clipart\"){\n                    fields.promize_attribute_clipart_values = {}\n                    let tempObj = {\n                        \"clipart_name\" : '',\n                        \"clipart_price\" : null,\n                        \"clipart_sku\" : null,\n                        \"promize_domain_clipart_category_id\" : '',\n                        \"promize_attribute_id\" : fields.promize_attribute_id,\n                    }\n                    fields.promize_attribute_clipart_values = tempObj\n                }else if(fields.attribute_type == \"image\"){\n                    fields.promize_attribute_image_values = {}\n                    let tempObj = {\n                        \"image_name\" : '',\n                        \"image_code\" : '',\n                        \"image_price\" : null,\n                        \"image_sku\" : '',\n                        \"min_upload_size\" : null,\n                        \"max_upload_size\" : null,\n                        \"image_format\" : '',\n                        \"additional_data\" : '',\n                        \"promize_attribute_id\" : fields.promize_attribute_id,\n                    }\n                    fields.promize_attribute_image_values = tempObj\n                }else if(fields.attribute_type == \"text\"){\n                    fields.promize_attribute_text_values = {}\n                    let tempObj = {\n                        \"promize_attribute_id\": fields.promize_attribute_id,\n                        \"text_name\":'',\n                        \"font_ids\":'',\n                        \"default_font_family\": '',\n                        \"font_size_ids\":'',\n                        \"default_font_size\":'',\n                        \"font_color_ids\":'',\n                        \"default_color\":'',\n                        // \"font_align_ids\":'',\n                        // \"default_text_align\":'',\n                        // \"font_shape\":'',\n                        // \"text_shape\":'',\n                        \"status\":1,\n                        \"text_sku\":'',\n                        \"text_price\":null\n                    }\n                    fields.promize_attribute_text_values = tempObj\n                }\n                this.setState({attribute_saved : true, fields:fields});\n        }\n        // else if (!newProps.textValues.isFetching && !newProps.textValues.isError && this.props.textValues.isFetching !== newProps.textValues.isFetching) {\n        //     let fields = newProps.textValues.response.records;\n        //     fields.promize_attribute_text_values = this.state.fields.promize_attribute_text_values;\n        //     // this.setState({ attribute_saved: true, fields: fields });\n        // }\n    }\n\n    render(){\n        const { attribute } = this.props;\n        const { textValues } = this.props;\n        let statusValue = (this.state.fields.status == 1) ? true : false;\n        return <Forms {...this.props} currentComponent={this} form={this.attribute} attribute={attribute} textValues={textValues} state={this.state} title={\"Add Attribute\"} handleInputFieldBlur={this.handleInputFieldBlur} reset={this.initialState} isEdit={false} statusValue={statusValue}/>\n    }\n\n}\nfunction mapStateToProps(state) {\n    const { attribute, textValues} = state;\n    return {\n        attribute, textValues\n    };\n}\n\nexport default connect(mapStateToProps)(Add);"],"sourceRoot":""}