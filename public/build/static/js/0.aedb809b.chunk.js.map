{"version":3,"sources":["components/form/Search.jsx","components/form/switchtoggle.jsx","components/grid/NoRecord.jsx","assets/images/no-data.png","components/grid/Delete.jsx","components/grid/pagination/Entries.jsx","components/grid/pagination/Paginate.jsx","components/grid/Pagination.jsx","components/grid/Table.jsx","actions/gridActions.jsx","utility/grid.js"],"names":["Search","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","type","value","this","props","onChange","placeholder","name","Component","switchtoggle","_this","Object","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","changeButton","bind","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","e","target","checked","checkValue","form","handleFieldsChangeByPlugin","changeMethod","react__WEBPACK_IMPORTED_MODULE_6___default","classWrapper","labelName","id","fieldName","htmlFor","React","NoRecord","rowSpan","rowspan","colSpan","colspan","isFetching","src","noData","module","exports","__webpack_require__","p","Delete","classCallCheck","possibleConstructorReturn","getPrototypeOf","handleToogleModal","assertThisInitialized","confirmMsg","concat","_","lowerCase","managementType","state","showModal","message","deleteDetails","self","$","document","on","event","which","trigger","deleteObj","preventDefault","setState","confirmStatus","triggerCancel","grid","deleteRecord","_this2","react_default","style","display","onClick","handleDeleteConfirmation","Entries","rows","rowsSelected","keys","rowsPerPageOptions","map","key","options","rowsPerPage","totalRecords","Paginate","pager","pageStart","generatePagination","nextProps","setPage","currentPage","page","totalPages","getPager","totalItems","pageSize","intermediate","startPage","endPage","Math","ceil","parseInt","pages","range","pageRows","length","loadData","aria-hidden","index","pagesArr","links","push","disabled","Pagination","handlePaginateClick","handleNumberEntryChange","pagination_Entries","assign","pagination_Paginate","Table","recordDeleted","data","fixedActionSet","response","rowDelete","isError","status","toastr","success","getRecordsAfterDelete","error","locale","common","remove","isUndefined","grid_Delete","ref","instance","delete","pageTitle","subTitle","filters","searchVal","handleColFiltersChange","addButton","children","grid_Pagination","getGridRecords","actionDetails","url","actionType","queryParams","method","types","PENDING","FULFILLED","REJECTED","objectSpread","breakcache","random","payload","deleteGridRecord","idKey","modelName","PKey","deleteParams","params","isObject","isArray","defineProperty","statusUpdateGridRecord","created_date","updated_date","Grid","argsObj","currentComponent","initialState","action","extraParams","manualPagination","listName","5","10","25","50","100","sortByFieldName","sortType","selectedRow","selectedRowPerPage","handleColSorting","handleDateFiltersChange","handleGlobalFiltersChange","updateColFiltersState","toggleRow","toggleSelectAll","addSelectedCheckBox","isRowChecked","resetPagination","resetCheckbox","handleColFiltersKeyDown","getHandlePaginate","getResponseData","sortVal","filterKey","arguments","undefined","validFilters","forEach","filter","filterName","isEmpty","subValidFilters","formatFilters","merge","filterVal","trim","JSON","stringify","replace","parse","set","getRecords","keyCode","handleFilter","str","letter","toLowerCase","search","selected","selectedDom","ReactDOM","findDOMNode","getAttribute","json","fields","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","result","err","return","records","from","to","slice","setExtraParams","dispatch","getQueryParams","deleteModalObj","console","statusUpdateObj","results","list","indexOf","setData","idIndex","splice","totalCheckBoxLength","prop","each","is","attr"],"mappings":"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","file":"static/js/0.aedb809b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n/*Handling events with React elements is very similar to handling events on DOM elements\n    * Inside a loop it is common to want to pass an extra parameter to an event handler.\n    *the e argument representing the React event will be passed as a second argument after the ID. \n    *With an arrow function, we have to pass it explicitly, \n    *but with bind any further arguments are automatically forwarded\n    *The bind() method creates a new function that, when called, has its this keyword set to the provided value\n    *An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target\n    */\nclass Search extends Component {\n    render() {\n        return <div className=\"search-container\">\n            <input type=\"text\" value={this.props.value || ''} onChange={this.props.onChange} className=\"promize-form-control\" placeholder=\"Search.. \" name=\"searchVal\" />\n            <i className=\"fa fa-search\"></i>\n        </div>\n    }\n\n}\n\nexport default Search;","import React from 'react';\n\nclass switchtoggle extends React.Component {\n  constructor(props) {\n    super(props)\n    this.changeButton = this.changeButton.bind(this);\n  }\n\n  changeButton(e) {\n    let value;\n    if (e.target.checked) {\n      value = this.props.checkValue['first'];\n    } else {\n      value = this.props.checkValue['second'];\n    }\n    this.props.form.handleFieldsChangeByPlugin && this.props.form.handleFieldsChangeByPlugin(e.target.name, value)\n  }\n\n  render() {\n    const changeMethod = this.props.onChange ? this.props.onChange : this.changeButton;\n    return (<div className={this.props.classWrapper ? this.props.classWrapper : \"form-group\" + \" check-mainbox\"}>\n      <div className={\"promize-toggle \" + this.props.className || this.props.className}>\n        <label>{this.props.labelName}</label>\n        <input className=\"tgl tgl-light\" id={this.props.id} onChange={changeMethod} checked={this.props.value == this.props.checkValue['first'] ? true : false} name={this.props.fieldName} type=\"checkbox\" />\n        <label className=\"tgl-btn\" htmlFor={this.props.id}></label>\n      </div>\n    </div>);\n  }\n}\n\nexport default switchtoggle;\n","import React, { Component } from 'react';\nimport noData from '../../assets/images/no-data.png';\n\nclass NoRecord extends Component {\n\n    render() {\n        const rowSpan = this.props.rowspan || 0;\n        const colSpan = this.props.colspan || 3;\n\n        if (this.props.isFetching) {\n            return <tr className=\"empty-row\"></tr>;\n        }\n        if (colSpan || colSpan) {\n            return <tr rowSpan={rowSpan}>\n                <td colSpan={colSpan}>\n                <div className=\"promize-no-data mt-15\">\n                    <img src={noData} />\n                    <p className=\"mt-10\">No Records Found</p>\n                </div>\n            </td>\n            </tr>\n        }\n        return <div className=\"promize-no-data mt-15\">\n            <img src={noData} />\n            <p className=\"mt-10\">No Records Found</p>\n        </div>\n\n    }\n}\n\nexport default NoRecord;","module.exports = __webpack_public_path__ + \"static/media/no-data.12573e6e.png\";","import React ,{ Component } from'react';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport toastr from 'toastr';\n// import Authorization from '../../utility/authorization';\n\nclass Delete extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleToogleModal = this.handleToogleModal.bind(this);\n        const confirmMsg = `${\"confirm delete\"} ${_.lowerCase(this.props.managementType)}?`\n        this.state = { \n          showModal: false,\n          message: confirmMsg,\n        };\n        this.deleteDetails = {};\n    }\n    /**\n     * Cancel the confirmation box by press enter button\n     */\n    triggerCancel(){\n      const self = this;\n        $(document).on(\"keyup\", function (event) {\n            if (event.which === 13 && self.state.showModal) {\n                $(\"#cancel\").trigger('click');\n            }\n        });\n    }\n\n    handleToogleModal(deleteObj, e) {\n      e.preventDefault();\n      this.deleteDetails = deleteObj;\n      if(this.state.showModal){\n        this.setState({showModal: false});\n      }else{\n        this.setState({showModal: true});\n      }      \n    }\n\n    handleDeleteConfirmation(confirmStatus, e){\n      e.preventDefault();\n      this.triggerCancel();\n      const confirmMsg = `${\"confirm_message\"} ${_.lowerCase(this.props.managementType)}?` \n      if(confirmStatus){\n        this.setState({showModal: false, message: confirmMsg});\n        this.props.grid.deleteRecord(this.deleteDetails);\n      }\n      else{\n        this.setState({showModal: false, message: confirmMsg});\n      }\n    }\n\n    render() {\n      return (    \n              <div className=\"promize-modal-cover-delete-popup\" style={{display: this.state.showModal ? 'block' : 'none' }}>\n                  <div className=\"promize-modal modal-sm\">\n                    <div className=\"promize-modal-header\">\n                      <h3 className=\"modal-title\">\n                          <span>\n                            Confirm delete\n                          </span>\n                      </h3>\n                    </div>\n                    <div className=\"promize-modal-body text-center\">\n                        <div className=\"promize-form-group mt-10\">\n                              <p>Are you sure you want to delete?</p>    \n                        </div>\n                    </div>\n                      <div className=\"promize-modal-footer df-js-center\">\n                          <button className=\"btn btn-promize-secondary\" id=\"cancel\" onClick={(e) => this.handleDeleteConfirmation(false, e)}>{\"No\"}</button>\n                          <button className=\"btn btn-promize-primary\" onClick={(e) => this.handleDeleteConfirmation(true, e)}>{\"Yes\"}</button>\n                      </div>\n                  </div>\n              </div>\n           )\n        }\n      }\nexport default Delete;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nclass Entries extends React.Component {\n\n    static propTypes = {\n        rowsSelected: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return( \n            <div className=\"promize-entries\">\n                <select className=\"promize-form-control select-control\" value={this.props.rows} onChange={this.props.rowsSelected}>\n                    {\n                        Object.keys(this.props.grid.rowsPerPageOptions).map((key) => {\n                            const options = this.props.grid.rowsPerPageOptions[key];\n                            return <option key={`Entries-${key}`} value={options}>{options}</option>\n                        })\n                    }                      \n                </select>\n                <p className=\"ml-10\">Displaying {this.props.grid.rowsPerPage} of {this.props.totalRecords}</p>\n            </div>\n        )\n    }\n}\n\nexport default Entries;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nclass Paginate extends React.Component {\n\n    static propTypes = {\n        totalRecords: PropTypes.number.isRequired,\n        rows: PropTypes.number.isRequired,\n        currentPage: PropTypes.number.isRequired,\n        grid: PropTypes.object.isRequired\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = { pager: {} };\n        this.pageStart = 1;\n    }\n\n    componentDidMount(){\n        this.generatePagination(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n           this.generatePagination(nextProps); \n    }\n\n    generatePagination(props){\n        // set page if items array isn't empty\n        if (props.totalRecords && props.totalRecords > 0) {\n            this.setPage(props, props.currentPage);\n        }\n    }\n    setPage(props, page){\n        const totalRecords = props.totalRecords;\n        let pager = this.state.pager;\n\n        if (page < this.pageStart || page > pager.totalPages) {\n            return;\n        }\n        // get new pager object for specified page\n        pager = this.getPager(props, totalRecords, page);\n        // update state\n        this.setState({ pager: pager });\n    }\n\n    getPager(props,totalItems, currentPage, pageSize) {\n        let intermediate = false;\n        currentPage = props.currentPage || props.grid.currentPage;\n        pageSize = props.rows || props.grid.rowsPerPage;\n \n        // calculate total pages\n        var totalPages = (Math.ceil(parseInt(totalItems) /parseInt(pageSize))) ; // 55 links\n        var startPage, endPage;\n\n        if (totalPages <= 3) {\n            // less than 4 total pages so show all\n            startPage = this.pageStart;\n            endPage = totalPages;\n        } else {\n            // more than 3 total pages so calculate start and end pages\n            if (currentPage <= 3) {\n                startPage = this.pageStart;\n                endPage = 3;\n            } else if (currentPage + 2 >= totalPages) { // End level\n                startPage = totalPages - 3;\n                endPage = totalPages;\n            } else { // Intermediate level\n                startPage = currentPage - 1;\n                endPage = currentPage + 1;\n                intermediate = true;\n            }\n\n        }\n \n        // create an array of pages to ng-repeat in the pager control\n        var pages = _.range(startPage, endPage + 1);\n \n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            pages: pages,\n            intermediate: intermediate\n        };\n    }\n\n    render(){\n\n        const pager = this.state.pager;\n        const pageRows = this.props.rows;\n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n\n        return(\n            <div className=\"promize-pagination\">\n                <ul>\n                    \n                    <li className={pager.currentPage === this.pageStart ? 'disabled' : ''} onClick={() => (pager.currentPage !== this.pageStart) && this.props.loadData(this.pageStart, pageRows)}>\n                        <button>\n                        <i className = \"fa fa-angle-double-left\" aria-hidden=\"true\"></i>\n                        </button>\n                    </li>\n                    <li className={pager.currentPage === this.pageStart ? 'disabled' : ''}  onClick={() => (pager.currentPage !== this.pageStart) && this.props.loadData(pager.currentPage - 1, pageRows)}>\n                        <button>\n                            <i className = \"fa fa-angle-left\" aria-hidden=\"true\"></i>\n                        </button>\n                    </li>\n                    {pager.pages.map((page, index, pagesArr) => {\n                            const links = [];\n                            if(pager.intermediate && index === 0){\n                                links.push(<li key={`pagination-link-${index}-first-dots`}><button>...</button></li>)\n                            }\n                            links.push(\n                                <li key={`pagination-link-${index}`} disabled={true} onClick={() => (pager.currentPage !== page) && this.props.loadData(page, pageRows)} >\n                                    <button className={(pager.currentPage === page) ? 'active' : ''}>\n                                        {page}\n                                    </button>\n                                </li>\n                            )\n                            if(pager.intermediate && (pagesArr.length-1) === index){\n                                links.push(<li key={`pagination-link-${index}-last-dots`}><button>...</button></li>)\n                            }\n                            return links;\n                        }\n                    )}\n                    <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                        <button onClick={() => (pager.currentPage !== pager.totalPages) && this.props.loadData(pager.currentPage + 1, pageRows)}>\n                            <i className = \"fa fa-angle-right\" aria-hidden=\"true\"></i>\n                        </button>\n                    </li>\n                    <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                        <button onClick={() => (pager.currentPage !== pager.totalPages) && this.props.loadData(pager.totalPages, pageRows)}>\n                            <i className = \"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\n                        </button>\n                    </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Paginate;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Entries from './pagination/Entries';\nimport Paginate from './pagination/Paginate';\n\nclass Pagination extends React.Component {\n\n    static propTypes = {\n        totalRecords: PropTypes.number,\n        rows: PropTypes.number.isRequired,\n        currentPage: PropTypes.number.isRequired,\n        grid: PropTypes.object.isRequired\n    }\n    \n    constructor(props) {\n        super(props);\n        this.rowsSelected = this.rowsSelected.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    /**\n     * Load the data when click on pagination link\n     */\n    loadData(page, pageRows){\n        this.props.grid.handlePaginateClick(page, pageRows);\n    }\n\n    /**\n     * Load data when change the rows per page default value\n     */\n    rowsSelected(e){\n        this.props.grid.handleNumberEntryChange(this.props.currentPage, e.target.value);\n    }\n\n    render() {\n        return ( \n            <div className=\"table-footer-action\">\n                { this.props.totalRecords > 10 &&  <Entries {...this.props} rowsSelected={this.rowsSelected} /> }\n                { this.props.totalRecords > 10 && <Paginate {...this.props} loadData={this.loadData} /> }\n            </div>\n        )\n    }\n\n}\n\nexport default Pagination;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport toastr from 'toastr';\nimport Delete from '../../components/grid/Delete';\nimport Search from '../form/Search'\nimport Pagination from '../../components/grid/Pagination';\n// import Loader from '../layouts/Loader';\n\nclass Table extends Component {\n\n    static propTypes = {\n        pageTitle: PropTypes.string,\n        managementType: PropTypes.string.isRequired,\n        grid: PropTypes.object.isRequired,\n        data: PropTypes.object.isRequired,\n        rowDelete: PropTypes.object,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.recordDeleted = this.recordDeleted.bind(this);\n        this.data = [];\n        this.fixedActionSet = false;\n    }\n\n    /**\n     * Handle the delete record response\n     *\n     * @param object\n     */\n    recordDeleted(props) {\n        const response = props.rowDelete.response;\n        if (response !== this.props.rowDelete.response) {\n            if (!props.rowDelete.isFetching && !props.rowDelete.isError && Object.keys(response).length > 0) {\n                if (response.status && response.status === 200) {\n                    toastr.success(response.message);\n                    props.grid.getRecordsAfterDelete();\n                }\n                else {\n                    toastr.error(response.message || this.props.locale.common.remove.error);\n                }\n            }\n            else if (props.rowDelete.isError) {\n                toastr.error(response.message || this.props.locale.common.remove.error);\n            }\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (!_.isUndefined(nextProps.rowDelete)) {\n            this.recordDeleted(nextProps);\n        }\n    }\n\n\n\n    render() {\n        return <div className=\"promize-card\">\n         <Delete {...this.props} ref={instance => { this.delete = instance; }} />\n        <div className=\"promize-card-header\">\n            <div className=\"promize-card-title\">\n                <h3><span>{this.props.pageTitle}</span></h3>\n                { this.props.subTitle && <p>{this.props.subTitle}</p> }\n            </div>\n            <div className=\"promize-card-action\">\n                <Search value={this.props.filters.searchVal} onChange={this.props.grid.handleColFiltersChange} />\n                {this.props.addButton}\n            </div>\n        </div>\n        <div className=\"promize-card-body\">\n            {this.props.children}\n            {!this.props.data.isFetching && this.props.data.response.data &&\n                this.props.data.response.data.length > 0 &&\n                <Pagination {...this.props} grid={this.props.grid} currentPage={this.props.grid.currentPage} rows={this.props.grid.rowsPerPage} totalRecords={this.props.data.response.totalRecords} />}\n        </div>\n        </div>\n    }\n}\n\nexport default Table;\n","import { isArray,isObject} from 'lodash';\nimport { GRID, PENDING, FULFILLED, REJECTED  } from \"../utility/constants\";\n\n/*Handling events with React elements is very similar to handling events on DOM elements\n* Inside a loop it is common to want to pass an extra parameter to an event handler.\n*the e argument representing the React event will be passed as a second argument after the ID.\n*With an arrow function, we have to pass it explicitly,\n*but with bind any further arguments are automatically forwarded\n*The bind() method creates a new function that, when called, has its this keyword set to the provided value\n*An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target\n*/\n\n/**\n * Get the records to Grid - async action creators\n * Hanlde the Pending, Fullfilled (Success), Rejected action\n *\n * @return object\n */\nexport function gridRecords(url, params){\n    return {\n\t\ttypes: [`${GRID}_${PENDING}`, `${GRID}_${FULFILLED}`, `${GRID}_${REJECTED}`],\n\t\tmethod: 'GET',\n\t\turl: url,\n\t\tqueryParams: params,\n\t\tpayload: {}\n\t}\n}\n\n/**\n * Get the records to Grid - async action creators\n * Hanlde the dynamic action based on given action type to Pending, Fullfilled (Success), Rejected actions\n *\n * @return object\n */\nexport function getGridRecords(actionDetails){\n\tconst {url, actionType, queryParams, method} = actionDetails;\n\treturn {\n\t\ttypes: [`${actionType}_${PENDING}`, `${actionType}_${FULFILLED}`, `${actionType}_${REJECTED}`],\n\t\tmethod: method,\n\t\turl: url,\n\t\t//queryParams: {...queryParams},\n    \tdata: method === 'POST' ? {...queryParams, breakcache:Math.random()} : {},\n\t\tpayload: {}\n\t}\n}\n\n/**\n * Deleted a record from Grid - async action creators\n * Hanlde the dynamic action based on given action type to Pending, Fullfilled (Success), Rejected actions\n *\n * @return object\n */\nexport function deleteGridRecord(actionDetails){\n    let {url, actionType, id, idKey, modelName,\n\t\tPKey, deleteParams} = actionDetails;\n    let params = {};\n    if(deleteParams && isObject(deleteParams)){\n        params = deleteParams;\n    }\n    else if(id && idKey){\n        id = isArray(id) ? id : [id];\n        params = { [idKey] : id };\n\t}\n\tparams.modelName = modelName;\n\tparams.idKey = PKey;\n\n    return {\n        types: [`${actionType}_${PENDING}`, `${actionType}_${FULFILLED}`, `${actionType}_${REJECTED}`],\n        method: 'DELETE',\n        url: `${url}`,\n        payload: {},\n        data: params\n    }\n}\n\n/**\n * Record status updated - async action creators\n * Hanlde the dynamic action based on given action type to Pending, Fullfilled (Success), Rejected actions\n *\n * @return object\n */\nexport function statusUpdateGridRecord(actionDetails){\n\tconst {url, actionType, modelName,\n\tPKey, params} = actionDetails;\n\tparams.status = (params.status == 1) ? 0 : 1\n\tparams.modelName = modelName;\n\tparams.idKey = PKey;\n\tdelete params.created_date;\n\tdelete params.updated_date;\n\treturn {\n\t\ttypes: [`${actionType}_${PENDING}`, `${actionType}_${FULFILLED}`, `${actionType}_${REJECTED}`],\n\t\tmethod: 'PUT',\n\t\turl: `${url}`,\n\t\tpayload: {},\n\t\tdata: params\n\t}\n}\n","import ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { getGridRecords, deleteGridRecord, statusUpdateGridRecord } from '../actions/gridActions';\n// import Authorization from './authorization';\n// import RequestFactory from \"./requestFactory\";\n\nclass Grid {\n  /**\n    * Get instance for utitlity\n    *\n    * @param object\n    * @param callback\n    * @return object\n    */\n  static getInstance(argsObj) {\n    return new Grid(argsObj);\n  }\n\n  /**\n    * Class initializer\n    *\n    * @param object\n    * @param callback\n    * @return void\n    */\n  constructor(argsObj) {\n    this.currentComponent = argsObj.currentComponent;\n    this.initialState = this.currentComponent.initialState(this.currentComponent);\n    this.url = argsObj.url; // Current action URL\n    this.action = argsObj.action || getGridRecords; // Current action method\n    this.actionType = argsObj.actionType; // Action type\n    this.method = argsObj.method || 'GET';\n    this.extraParams = argsObj.extraParams;\n    this.manualPagination = argsObj.manualPagination || false;\n    this.listName = argsObj.listName;\n    this.currentPage = parseInt(argsObj.currentPage) || 1; // Current page number\n    this.rowsPerPage = 10; // Records per page\n    this.rowsPerPageOptions = {\n      5: 5,\n      10: 10,\n      25: 25,\n      50: 50,\n      100: 100,\n    };\n    this.sortByFieldName = ''; // Table head column sort by field name\n    this.sortType = ''; // Default sort type -1 (-1 - DESC, 1 - ASC)\n    this.selectedRow = [];\n    this.selectedRowPerPage = 0;\n\n    this.handleColFiltersChange = this.handleColFiltersChange.bind(this);\n    this.handleColSorting = this.handleColSorting.bind(this);\n    this.handlePaginateClick = this.handlePaginateClick.bind(this);\n    this.handleDateFiltersChange = this.handleDateFiltersChange.bind(this);\n    this.handleGlobalFiltersChange = this.handleGlobalFiltersChange.bind(this);\n    this.updateColFiltersState = this.updateColFiltersState.bind(this);\n    this.toggleRow = this.toggleRow.bind(this);\n    this.toggleSelectAll = this.toggleSelectAll.bind(this);\n    this.addSelectedCheckBox = this.addSelectedCheckBox.bind(this);\n    this.isRowChecked = this.isRowChecked.bind(this);\n    this.resetPagination = this.resetPagination.bind(this);\n    this.resetCheckbox = this.resetCheckbox.bind(this);\n    this.handleNumberEntryChange = this.handleNumberEntryChange.bind(this);\n    this.handleColFiltersKeyDown = this.handleColFiltersKeyDown.bind(this);\n    this.getHandlePaginate = this.getHandlePaginate.bind(this);\n    this.getResponseData = this.getResponseData.bind(this);\n    this.totalRecords = 0;\n  }\n\n  /**\n    * build the query\n    *\n    * @return object\n    */\n  getQueryParams() {\n    const extraParams = this.extraParams || {};\n    const filters = (this.currentComponent.state && typeof this.currentComponent.state.filters === 'object') ? this.currentComponent.state.filters : {};\n    const params = {\n      ...extraParams,\n      currentPage: this.currentPage,\n      rowsPerPage: this.rowsPerPage,\n      sortVal: this.sortType,\n      ...filters,\n    };\n    return params;\n  }\n\n  /**\n     * Join the nested objects by using dots\n     *\n     * @param object filters\n     * @param string filterKey\n     */\n  formatFilters(filters, filterKey = '') {\n    const self = this;\n    let validFilters = {};\n    Object.keys(filters).forEach((filter) => {\n      const filterName = !_.isEmpty(filterKey) ? `${filterKey}.${filter}` : filter;\n      if (_.isObject(filters[filter])) {\n        const subValidFilters = self.formatFilters(filters[filter], filterName);\n        validFilters = _.merge(validFilters, subValidFilters);\n        return;\n      }\n\n      const filterVal = filters[filter].trim();\n      if (!_.isEmpty(filterVal)) {\n        validFilters[filterName] = filterVal;\n      }\n    });\n    return validFilters;\n  }\n\n  /**\n    * Build the head column filter to pass in query string\n    *\n    * @return object\n    */\n  getFilters(filters) {\n    const validFilters = this.formatFilters(filters);\n    return !_.isEmpty(validFilters) ? JSON.stringify(validFilters).replace('{', '').replace('}', '') : '';\n  }\n\n  /**\n     * Update the header filter state value\n     */\n  updateColFiltersState(name, value) {\n    let filters = JSON.parse(JSON.stringify(this.currentComponent.state.filters));\n    filters = _.set(filters, name, value);\n    this.currentComponent.setState({ filters }, () => {\n      this.getRecords();\n    });\n  }\n\n  /**\n     * Handle grid column filter text change\n     */\n  handleColFiltersChange(e) {\n    this.updateColFiltersState(e.target.name, e.target.value);\n  }\n\n  /**\n     * Handle grid column filter keyDown\n     */\n  handleColFiltersKeyDown(e) {\n    // Call table header filter when user press 'Enter key'\n    if (e.keyCode === 13 || e.which === 13) {\n      this.handleFilter();\n    }\n  }\n\n  /**\n     * Handle grid column filter select input change\n     */\n  handleColFiltersSelectChange(name, value) {\n    this.updateColFiltersState(name, value);\n  }\n\n  /**\n     * Handle grid column filter change\n     */\n  handleColSorting(e) {\n    e.preventDefault();\n    this.sortType = (this.sortType === 'DESC') ? 'ASC' : 'DESC';\n    this.getRecords();\n  }\n\n  /**\n    * build the query\n    *\n    * @return object\n    */\n  camelCaseRelace(str) {\n    const replace = '_';\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter, index) => (index === 0 ? letter.toLowerCase() : replace.concat(letter.toLowerCase()))).replace(/\\s+/g, '');\n  }\n\n  /**\n     * Handle grid global search change\n     */\n  handleGlobalFiltersChange(e) {\n    // This Comment code required in future\n    this.currentComponent.setState({ search: e.target.value });\n  }\n\n  /**\n     * Handle grid column filter change\n     */\n  handleDateFiltersChange(selected, value) {\n    /**\n        * Declare the handle Select Change\n        */\n    const selectedDom = ReactDOM.findDOMNode(selected);\n    const name = selectedDom.getAttribute('data-name') ? selectedDom.getAttribute('data-name') : selectedDom.getAttribute('name');\n    const filters = { ...this.currentComponent.state.filters };\n    filters[name] = value;\n    this.currentComponent.setState({ filters, search: value });\n  }\n\n  /**\n    * Handle field changes from Plugin\n    *\n    * @param name\n    * @param value\n    * @return void\n    */\n  handleFieldsChangeByJson(json) {\n    let fields = JSON.parse(JSON.stringify(this.currentComponent.state.filters));\n    for (const result of json) {\n      fields = _.set(fields, result.name, result.value);\n    }\n    this.currentComponent.setState({ filters: fields });\n  }\n\n  /**\n   * Declare the handle Select Change\n   */\n  handleSelectChange(selected, value) {\n    const selectedDom = ReactDOM.findDOMNode(selected);\n    const name = selectedDom.getAttribute('data-name') ? selectedDom.getAttribute('data-name') : selectedDom.getAttribute('name');\n    const filters = { ...this.currentComponent.state.filters };\n    filters[name] = value;\n    this.currentComponent.setState({ filters, search: value });\n  }\n\n  /**\n     * Handle the getHandlePaginate\n     */\n  getHandlePaginate(records, totalRecords) {\n    const { currentPage } = this;\n    const { rowsPerPage } = this;\n    const from = currentPage * rowsPerPage;\n    const to = from + rowsPerPage;\n    records = _.slice(records, from, to);\n    return records;\n  }\n\n  /**\n     * Handle the pagination click\n     */\n  handlePaginateClick(page, pageRows) {\n    let data;\n    this.currentPage = page;\n    if (this.rowsPerPage !== pageRows) {\n      this.resetPagination();\n    }\n    this.rowsPerPage = parseInt(pageRows);\n    if (this.manualPagination) {\n      data = this.getResponseData();\n      this.currentComponent.setState({ [this.listName]: data });\n    } else {\n      this.getRecords();\n    }\n  }\n\n  /**\n     * Handle the No Of Entries change\n     */\n  handleNumberEntryChange(page, pageRows) {\n    this.resetCheckbox();\n    this.handlePaginateClick(page, pageRows);\n  }\n\n  /**\n     * Set additional parameters into queryparams\n     */\n  setExtraParams(extraParams) {\n    this.extraParams = (extraParams && typeof extraParams === 'object') ? ({ ...this.extraParams, ...extraParams }) : null;\n  }\n\n  /**\n     * Get the records for table\n     */\n  getRecords(extraParams) {\n    if (extraParams) {\n      this.setExtraParams(extraParams);\n    }\n    return this.currentComponent.props.dispatch(this.action({\n      url: this.url, actionType: this.actionType, queryParams: this.getQueryParams(), method: this.method,\n    }));\n  }\n\n  /**\n     * Handle the delete funtionality\n     */\n  deleteRecord(deleteModalObj) {\n    if (typeof deleteModalObj !== 'object') {\n      // This is the error statement to the developers\n      console.error('The \"Delete Record\" method arguments must be an object.');\n      return;\n    }\n    const action = deleteModalObj.action || deleteGridRecord;\n    return this.currentComponent.props.dispatch(action(deleteModalObj));\n  }\n\n  /**\n     * Handle the status update functionality\n     */\n  statusUpdate(statusUpdateObj, e) {\n    e.preventDefault();\n    if (typeof statusUpdateObj !== 'object') {\n      // This is the error statement to the developers\n      console.error('The \"Status Update\" method arguments must be an object.');\n      return;\n    }\n\n    const action = statusUpdateObj.action || statusUpdateGridRecord;\n    // statusUpdateObj.params['regId'] = Authorization.getAuthUserId();\n    return this.currentComponent.props.dispatch(action(statusUpdateObj));\n  }\n\n  /**\n     * Handle the status update functionality\n     */\n  statusUpdateUser(statusUpdateObj, e) {\n    e.preventDefault();\n    if (typeof statusUpdateObj !== 'object') {\n      // This is the error statement to the developers\n      console.error('The \"Status Update\" method arguments must be an object.');\n      return;\n    }\n\n    const action = statusUpdateObj.action || statusUpdateGridRecord;\n    // statusUpdateObj.params['regId'] = Authorization.getAuthUserId();\n    return this.currentComponent.props.dispatch(action(statusUpdateObj));\n  }\n\n  /**\n     * Handle the checkIfResponse\n     */\n  getResponseData() {\n    let data;\n    data = this.currentComponent.props[this.listName];\n    data = data.response ? data.response.data : [];\n    return data;\n  }\n\n  /**\n     * Handle the column based filter\n     */\n  handleFilter() {\n    this.resetPagination();\n    if (this.manualPagination) {\n      const list = this.getResponseData();\n      let results = [];\n      const { filters } = this.currentComponent.state;\n      results = _.filter(list, (data) => {\n        for (const filter in filters) {\n          return data[filter].toLowerCase().indexOf(filters[filter].toLowerCase()) > -1;\n        }\n      });\n      this.totalRecords = results.length || 1;\n\n      this.currentComponent.setData(results);\n    } else {\n      this.getRecords();\n    }\n  }\n\n  /**\n     * Handle the column based filter reset\n     */\n  handleResetFilter() {\n    this.resetPagination();\n    this.currentComponent.setState({ filters: this.initialState.filters, search: this.initialState.search }, () => this.handleFilter());\n  }\n\n  /**\n     * Reset the pagination\n    */\n  resetPagination() {\n    this.currentPage = 1;\n    this.rowsPerPage = 10;\n  }\n\n  /**\n     * Reset the all & row checkbox\n    */\n  resetCheckbox() {\n    this.selectedRow = [];\n    this.selectedRowPerPage = this.currentPage;\n  }\n\n  /**\n     * When user bulk delete the all the of the current page,\n     * then currentPage is more than 0, need to reset the page to one level back\n     * So it will fetch the previous page record.\n     * Suppose if we do not reset to one page back, then it will show the 'No record exist' message on current page\n     *\n    */\n  getRecordsAfterDelete() {\n    if (this.selectedRow.length > 0) {\n      this.resetCheckbox();\n      this.currentPage = this.currentPage > 0 ? this.currentPage - 1 : this.currentPage;\n    }\n    this.getRecords();\n  }\n\n  addSelectedCheckBox(id) {\n    // Grid checkbox workflow\n    // User could select the checkbox from current page.\n    // After selected the rows when user switched to next page and select the row at that time reset the previously selected rows and update the current page selected rows\n    // After switched next page, But not select any rows and coming back to previously selected rows page, need to display the selected rows.\n    if (this.selectedRowPerPage !== this.currentPage) {\n      this.resetCheckbox();\n    }\n\n    const idIndex = this.selectedRow.indexOf(id);\n    if (idIndex > -1) {\n      this.selectedRow.splice(idIndex, 1);\n    } else {\n      this.selectedRow.push(id);\n    }\n  }\n\n  // Check whether current row is selected or not\n  isRowChecked(id) {\n    return this.selectedRow.indexOf(id) > -1;\n  }\n\n  /**\n     * Function is used to toggle select all check box when user click each record instead of select all checkbox\n     *\n     * @param int id\n     * @return void\n    */\n  toggleRow(e) {\n    // Get the total checkbox length of current page\n    const totalCheckBoxLength = $('.rowCheckbox').length;\n    // Get the checked or selected checkbox length of current page\n    const checkedCheckboxLength = $('.rowCheckbox:checked').length;\n\n    // Check whether total checkbox and checked checkbox on the current page is equal or not\n    // If equal, then make check the 'selectAll' checkbox\n    // If not, then uncheck the 'selectAll' checkbox\n    if (checkedCheckboxLength === totalCheckBoxLength) {\n      $('#selectAllCheckbox').prop('checked', true);\n    } else {\n      $('#selectAllCheckbox').prop('checked', false);\n    }\n\n    this.addSelectedCheckBox(e.target.value);\n  }\n\n\n  /**\n     * Function is used to toggle select all check box\n     *\n     * @return void\n     */\n  toggleSelectAll(e) {\n    const self = this;\n    if ($('#selectAllCheckbox').prop('checked')) {\n      $('.rowCheckbox').each(function () {\n        if ($(this).is(':checked') === false) {\n          $(this).prop('checked', true);\n          self.addSelectedCheckBox($(this).attr('value'));\n        }\n      });\n      // $('.options-drop').show();\n    } else {\n      $('.rowCheckbox').each(function () {\n        $(this).prop('checked', false);\n        self.addSelectedCheckBox($(this).attr('value'));\n      });\n      // $('.options-drop').hide();\n    }\n  }\n}\n\nexport default Grid;\n"],"sourceRoot":""}