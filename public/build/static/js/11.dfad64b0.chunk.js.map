{"version":3,"sources":["actions/fontcolor/index.jsx","assets/images/color-picker.png","components/form/inputColor.jsx","containers/Fontcolor/form.jsx","containers/Fontcolor/index.jsx","components/form/SubmitButton.jsx"],"names":["save","data","method","url","Object","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","modelName","idKey","promize_font_color_id","created_date","updated_date","types","concat","FONT_COLOR","PENDING","FULFILLED","REJECTED","payload","receiveType","getAllFontColors","domain_id","app","DOMAIN_ID","FONT_COLORS","module","exports","__webpack_require__","p","InputColor","state","color","r","g","b","a","displayColorPicker","handleClick","e","_this","setState","handleColorChange","rgb","props","handleChangeComplete","validation","this","form","fieldName","message","inputErrors","classValidation","value","className","classNameCheck","styles","reactCSS","default","width","height","borderRadius","background","swatch","padding","display","cursor","popover","position","zIndex","bottom","right","cover","top","left","react_default","createElement","Fragment","htmlFor","labelName","type","inputType","id","step","inputStep","data-type","dataType","data-name","dataName","placeholder","name","onBlur","blurEventListner","disabled","onChange","handleFieldsChange","data-validation-name","maxLength","style","onClick","src","colorPicker","react_color_lib","disableAlpha","fields","font_color_code","onChangeComplete","input","React","Component","font_color_name","Forms","onSubmit","font","handleSubmit","form_input","assign","inputColor","enablePopup","SubmitButton","text","response","Fontcolor","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","field","obj","objectSpread","hex","status","openPopup","displayRows","bind","assertThisInitialized","filters","searchVal","searchKey","fonts","formValidation","grid","Grid","getInstance","currentComponent","actionType","Form","dispatch","resetForm","getRecords","_this2","fontcolors","fontResponse","fontcolor","isFetching","keys","length","isError","console","log","toastr","success","error","preventDefault","_this3","fontRows","NoRecord","colspan","map","index","key","switchtoggle","statusUpdate","FONT_STATUS_UPDATE","params","PKey","spanLabel","first","second","checkValue","editFont","table","delete","handleToogleModal","FONT_DELETE","nextProps","setData","_this4","Fontcolor_form","Table","ref","instance","pageTitle","managementType","addButton","rowDelete","fontDelete","sortType","handleColSorting","connect","fontStatus","fileUpload","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref"],"mappings":"qLAEO,SAASA,EAAKC,GACjB,IAAIC,EAAS,OAAQC,EAAM,eAY3B,OAXAF,EAAIG,OAAAC,EAAA,EAAAD,CAAA,GACGH,EADH,CAEAK,UAAW,qBACXC,MAAO,2BAEFC,wBACLN,EAAS,MACTC,EAAM,sBACCF,EAAKQ,oBACLR,EAAKS,cAET,CACHC,MAAO,IAAAC,OAAIC,IAAJ,KAAAD,OAAkBE,KAAlB,GAAAF,OAAgCC,IAAhC,KAAAD,OAA8CG,KAA9C,GAAAH,OAA8DC,IAA9D,KAAAD,OAA4EI,MACnFd,OAAQA,EACRC,IAAKA,EACLF,KAAMA,EACNgB,QAAS,CAAEC,YAAa,aAIzB,SAASC,IACZ,IAAIlB,EAAO,CACPK,UAAW,qBACXC,MAAO,wBACPa,UAAWC,IAAIC,WASnB,MAPgB,CACZX,MAAO,IAAAC,OAAIW,IAAJ,KAAAX,OAAmBE,KAAnB,GAAAF,OAAiCW,IAAjC,KAAAX,OAAgDG,KAAhD,GAAAH,OAAgEW,IAAhE,KAAAX,OAA+EI,MACtFd,OAAQ,OACRC,IAAK,gBACLF,KAAMA,yBClCduB,EAAAC,QAAiBC,EAAAC,EAAuB,8RC4GzBC,6MAtGdC,MAAQ,CACPC,MAAO,CACNC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KAEJC,oBAAoB,KAGrBC,YAAc,SAAAC,GAEbC,EAAKC,SAAS,CAAEJ,oBAAqBG,EAAKT,MAAMM,wBAEjDK,kBAAoB,SAAAV,GACnBQ,EAAKC,SAAS,CAAET,MAAOA,EAAMW,MAC7BH,EAAKI,MAAMC,qBAAqBb,oFAGhC,IAAMc,EAAaC,KAAKH,MAAMI,KAAKF,WAAWC,KAAKH,MAAMK,WACnDC,EAAUJ,EAAaC,KAAKH,MAAMb,MAAMoB,YAAYJ,KAAKH,MAAMK,WAAWC,QAAU,GACpFE,EAAe,cAAAtC,OAAiBgC,EAAa,cAAgB,GAA9C,KAAAhC,OAAoDiC,KAAKH,MAAMS,QAAUP,EAAa,eAAiB,IAE5H,MAAO,CAAEQ,UADSP,KAAKH,MAAME,WAAaM,EAAkB,aAC3BF,QAAWA,EAASJ,WAAcA,mCAInE,IAAMA,EAAaC,KAAKQ,iBAClBC,EAASC,IAAS,CACvBC,QAAW,CACV1B,MAAO,CACN2B,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,WAAU,QAAAhD,OAAUiC,KAAKhB,MAAMC,MAAMC,EAA3B,MAAAnB,OAAiCiC,KAAKhB,MAAMC,MAAME,EAAlD,MAAApB,OAAwDiC,KAAKhB,MAAMC,MAAMG,EAAzE,MAAArB,OAA+EiC,KAAKhB,MAAMC,MAAMI,EAAhG,MAEX2B,OAAQ,CACPC,QAAS,cACTF,WAAY,OACZD,aAAc,MACdI,QAAS,eACTC,OAAQ,WAETC,QAAS,CACRC,SAAU,WACVC,OAAQ,IACRC,OAAQ,OACRC,MAAO,KAERC,MAAO,CACNJ,SAAU,QACVK,IAAK,MACLF,MAAO,MACPD,OAAQ,OACRI,KAAM,UAIT,OAAQC,EAAAvC,EAAAwC,cAACD,EAAAvC,EAAMyC,SAAP,KAAgBF,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,yCACtCqB,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,0BACdqB,EAAAvC,EAAAwC,cAAA,SAAOE,QAAS/B,KAAKH,MAAMK,UAAWK,UAAU,8BAA8BP,KAAKH,MAAMmC,UAAWhC,KAAKH,MAAME,YAAc6B,EAAAvC,EAAAwC,cAAA,iBAC7HD,EAAAvC,EAAAwC,cAAA,SAAOtB,UAAU,uBAChB0B,KAAMjC,KAAKH,MAAMqC,UAAYlC,KAAKH,MAAMqC,UAAY,OACpDC,GAAInC,KAAKH,MAAMK,UACfkC,KAAMpC,KAAKH,MAAMwC,UAAYrC,KAAKH,MAAMwC,UAAY,GACpDC,YAAWtC,KAAKH,MAAM0C,UAAY,OAClCC,YAAWxC,KAAKH,MAAM4C,SACtBC,YAAa1C,KAAKH,MAAM6C,YAAc1C,KAAKH,MAAM6C,YAAc,GAC/DC,KAAM3C,KAAKH,MAAMK,UACjB0C,OAAQ5C,KAAKH,MAAM+C,QAAU5C,KAAKH,MAAMI,KAAK4C,iBAC7CC,SAAU9C,KAAKH,MAAMiD,SACrBC,SAAU/C,KAAKH,MAAMkD,UAAY/C,KAAKH,MAAMI,KAAK+C,mBACjD1C,MAAON,KAAKH,MAAMS,MAClB2C,uBAAsBjD,KAAKH,MAAMmC,UACjCkB,UAAWlD,KAAKH,MAAMqD,aAExBtB,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,kBACdqB,EAAAvC,EAAAwC,cAAA,OAAKsB,MAAO1C,EAAOO,OAAQoC,QAASpD,KAAKT,aACxCqC,EAAAvC,EAAAwC,cAAA,OAAKwB,IAAKC,OAGVtD,KAAKhB,MAAMM,oBAAsBsC,EAAAvC,EAAAwC,cAAA,OAAKsB,MAAO1C,EAAOW,SACpDQ,EAAAvC,EAAAwC,cAAA,OAAKsB,MAAO1C,EAAOgB,MAAO2B,QAASpD,KAAKT,cACxCqC,EAAAvC,EAAAwC,cAAC0B,EAAA,aAAD,CACCC,cAAc,EACdvE,MAAOe,KAAKH,MAAMb,MAAMyE,OAAOC,gBAC/BC,iBAAkB3D,KAAKL,sBAIzBI,EAAU,YAAkB6B,EAAAvC,EAAAwC,cAAA,QAAMtB,UAAU,sBAAsB,GAAAxC,OAAGiC,KAAKH,MAAMmC,UAAd,KAA6BjC,EAAU,4CAM3G,OAAQ6B,EAAAvC,EAAAwC,cAACD,EAAAvC,EAAMyC,SAAP,KACN9B,KAAK4D,gBAlGgBC,IAAMC,mBCwBxB,IAAM/D,EAAa,SAACF,GAKvB,MAJc,CACVkE,gBAAmB,WACnBL,gBAAmB,aAiDZM,mLA3CP,OAAOpC,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,uBACtBqB,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,0BACXqB,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,wBACXqB,EAAAvC,EAAAwC,cAAA,MAAItB,UAAU,eACVqB,EAAAvC,EAAAwC,cAAA,gCAKRD,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,sBACdqB,EAAAvC,EAAAwC,cAAA,QAAMoC,SAAUjE,KAAKH,MAAMqE,KAAKC,aAAc9G,OAAO,QAClDuE,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,WACXqB,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,UACXqB,EAAAvC,EAAAwC,cAACuC,EAAA,EAAD7G,OAAA8G,OAAA,GAAWrE,KAAKH,MAAhB,CAAuBI,KAAMD,KAAKH,MAAMqE,KACpChE,UAAW,kBACXI,MAAON,KAAKH,MAAMb,MAAMyE,OAAOM,gBAC/B/B,UAAW,aACXjC,YAAY,MAGpB6B,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,UACXqB,EAAAvC,EAAAwC,cAACyC,EAAD/G,OAAA8G,OAAA,GAAgBrE,KAAKH,MAArB,CAA4BI,KAAMD,KAAKH,MAAMqE,KACzChE,UAAW,kBACXI,MAAON,KAAKH,MAAMb,MAAMyE,OAAOC,gBAC/B1B,UAAW,aACXjC,YAAY,MAGpB6B,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,0BACXqB,EAAAvC,EAAAwC,cAAA,UAAStB,UAAU,4BAA4B6C,QAASpD,KAAKH,MAAM0E,aAAnE,UACA3C,EAAAvC,EAAAwC,cAAC2C,EAAA,EAAD,CAAcjE,UAAU,0BAA0BkE,KAAM,OAAQC,SAAU1E,KAAKH,MAAMb,MAAMyE,sBAhC/FK,8BCvBda,cAEF,SAAAA,EAAY9E,GAAO,IAAAJ,EAAAlC,OAAAqH,EAAA,EAAArH,CAAAyC,KAAA2E,IACflF,EAAAlC,OAAAsH,EAAA,EAAAtH,CAAAyC,KAAAzC,OAAAuH,EAAA,EAAAvH,CAAAoH,GAAAI,KAAA/E,KAAMH,KAoHVC,qBAAuB,SAACb,GACpB,IAAI+F,EAAQvF,EAAKT,MAAMyE,OACnBwB,EAAG1H,OAAA2H,EAAA,EAAA3H,CAAA,GAAQyH,EAAR,CAAetB,gBAAiBzE,EAAMkG,MAC7C1F,EAAKC,SAAS,CAAE+D,OAAQwB,KAxHTxF,EA0HnB8E,YAAc,WACV,IAAId,EAAS,CACTM,gBAAkB,GAClBL,gBAAkB,GAClBnF,UAAYC,IAAIC,UAChB2G,OAAS,GAEb3F,EAAKC,SAAS,CAAC+D,SAAQ4B,WAAa5F,EAAKT,MAAMqG,aA/H/C5F,EAAKT,MAAQ,CACTqG,WAAY,GAEhB5F,EAAK6F,YAAc7F,EAAK6F,YAAYC,KAAjBhI,OAAAiI,EAAA,EAAAjI,CAAAkC,IACnBA,EAAKT,MDZY,CACjByG,QAAS,CACLlH,UAAWC,IAAIC,UACfiH,UAAW,GACXjI,UAAW,qBACXkI,UAAW,kBACXjI,MAAO,yBAEX+F,OAAQ,CACJM,gBAAiB,GACjBL,gBAAiB,GACjBnF,UAAWC,IAAIC,UACf2G,OAAQ,GAEZQ,MAAO,GACPxF,YAAa,ICFb,IAAMyF,EAAiB9F,IAPR,OAQfN,EAAKqG,KAAOC,IAAKC,YAAY,CAAEC,iBAAiB1I,OAAAiI,EAAA,EAAAjI,CAAAkC,GAAOnC,IAAK,yBAA0B4I,WAAYxH,IAAarB,OAAQ,SAEvHoC,EAAKyE,KAAOiC,IAAKH,YAALzI,OAAAiI,EAAA,EAAAjI,CAAAkC,GACHoG,EACL,SAACpC,GACGhE,EAAKI,MAAMuG,SAASjJ,YAAKsG,IACzBhE,EAAK4G,aAET,GACA,IAjBW5G,8EAqBf,MAAO,CACHgG,QAAS,CACLlH,UAAWyB,KAAKH,MAAMrB,IAAIC,UAC1BiH,UAAW,GACXjI,UAAW,qBACXkI,UAAW,kBACXjI,MAAO,yBAEX+F,OAAQ,CACJM,gBAAkB,GAClBL,gBAAkB,GAClBnF,UAAYC,IAAIC,UAChB2G,OAAS,GAEbQ,MAAO,GACPxF,YAAY,gDAKhBJ,KAAK8F,KAAKQ,iDAEH,IAAAC,EAAAvG,KACHyD,EAAS,CACTM,gBAAkB,GAClBL,gBAAkB,GAClBnF,UAAYC,IAAIC,UAChB2G,OAAS,GAEbpF,KAAKN,SAAS,CAAC+D,UAAQ,WACnB8C,EAAKT,KAAKQ,+CAIVzG,GACJ,IAAM6E,EAAW7E,EAAM2G,WAAW9B,SAC5B+B,EAAe5G,EAAM6G,UAAUhC,SACjCA,IAAa1E,KAAKH,MAAM2G,WAAW9B,YAC9B7E,EAAM2G,WAAWG,YAAejC,EAAStH,MAAQG,OAAOqJ,KAAKlC,EAAStH,MAAMyJ,OAAS,GAAKnC,EAASU,QAA8B,MAApBV,EAASU,OACvHpF,KAAKN,SAAS,CAAEkG,MAAOlB,EAAStH,MAAQ,GAAIiI,WAAY,KAElDxF,EAAM2G,WAAWG,YAAc9G,EAAM2G,WAAWM,SACtD9G,KAAKN,SAAS,CAAEkG,MAAO,MAG/BmB,QAAQC,IAAI,OACRP,IAAiBzG,KAAKH,MAAM6G,UAAUhC,WACtCqC,QAAQC,IAAI,OACPnH,EAAM6G,UAAUC,YAAc9G,EAAM6G,UAAUhC,SAAStH,MAAQG,OAAOqJ,KAAK/G,EAAM6G,UAAUhC,SAAStH,MAAMyJ,OAAS,GAAKhH,EAAM6G,UAAUhC,SAASU,QAA8C,MAApCvF,EAAM6G,UAAUhC,SAASU,QACrL6B,IAAOC,QAAQrH,EAAM6G,UAAUhC,SAASvE,SACxCH,KAAKN,SAAS,CAAE2F,WAAY,MAEtBxF,EAAM6G,UAAUC,YAAc9G,EAAM6G,UAAUI,SACpDG,IAAOE,MAAMtH,EAAM6G,UAAUhC,SAASvE,2CAIzCX,EAAG0E,GACR1E,EAAE4H,iBACFpH,KAAKN,SAAS,CAAC+D,OAASS,EAAKmB,WAAarF,KAAKhB,MAAMqG,kDAE3C,IAAAgC,EAAArH,KACJ4F,EAAQ5F,KAAKhB,MAAM4G,MACrB0B,EAAW1F,EAAAvC,EAAAwC,cAAC0F,EAAA,EAAD,CAAUZ,WAAY3G,KAAKH,MAAM2G,WAAWG,WAAYa,QAAQ,OA4B/E,OA3BI5B,EAAMiB,OAAS,IACfS,EAAW1B,EAAM6B,IAAI,SAACvD,EAAMwD,GACxB,IAAItC,EAAyB,GAAflB,EAAKkB,OAEnB,OAAOxD,EAAAvC,EAAAwC,cAAA,MAAI8F,IAAKD,GACZ9F,EAAAvC,EAAAwC,cAAA,UAAKqC,EAAKH,iBACVnC,EAAAvC,EAAAwC,cAAA,UAAKqC,EAAKR,iBACV9B,EAAAvC,EAAAwC,cAAA,UACID,EAAAvC,EAAAwC,cAAC+F,EAAA,EAADrK,OAAA8G,OAAA,GAAmBgD,EAAKxH,MAAxB,CACIS,MAAO8E,EACPlF,UAAW,SACXiC,GAAI+B,EAAKvG,sBACToF,SAAU,SAACvD,GAAQ6H,EAAKvB,KAAK+B,aAAa,CAAEvK,IAAK,eAAgB4I,WAAY4B,IAAoBC,OAAQ7D,EAAMzG,UAAW,qBAC1HuK,KAAM,yBAA2BxI,IACjCyI,UAAW,CAAEC,MAAO,SAAUC,OAAQ,YACtCC,WAAY,CAAEF,OAAO,EAAMC,QAAQ,OAG3CvG,EAAAvC,EAAAwC,cAAA,UACID,EAAAvC,EAAAwC,cAAA,OAAKtB,UAAU,iBACXqB,EAAAvC,EAAAwC,cAAA,UAAQtB,UAAU,eAAe6C,QAAS,SAAC5D,GAAD,OAAO6H,EAAKgB,SAAS7I,EAAE0E,KAAOtC,EAAAvC,EAAAwC,cAAA,KAAGtB,UAAU,sBACrFqB,EAAAvC,EAAAwC,cAAA,UAAQtB,UAAU,iBAAiB6C,QAAS,SAAC5D,GAAD,OAAO6H,EAAKiB,MAAMC,OAAOC,kBAAkB,CAAErG,GAAI+B,EAAKvG,sBAAuBD,MAAO,MAAOJ,IAAK,eAAgB4I,WAAYuC,IAAahL,UAAW,qBAAsBuK,KAAM,yBAA2BxI,KAAIoC,EAAAvC,EAAAwC,cAAA,KAAGtB,UAAU,2BAMrR+G,oDAEeoB,GACtB1I,KAAK2I,QAAQD,oCAgBR,IAAAE,EAAA5I,KACL,OACI4B,EAAAvC,EAAAwC,cAACD,EAAAvC,EAAMyC,SAAP,KACO9B,KAAKhB,MAAMqG,WAAazD,EAAAvC,EAAAwC,cAAA,WACpBD,EAAAvC,EAAAwC,cAACgH,EAADtL,OAAA8G,OAAA,GAAWrE,KAAX,CAAiBkE,KAAMlE,KAAKkE,KAAMpE,qBAAsBE,KAAKF,qBAAsByE,YAAavE,KAAKuE,YAAa0B,iBAAoBjG,SAGjJ4B,EAAAvC,EAAAwC,cAACiH,EAAA,EAADvL,OAAA8G,OAAA,CACI0E,IAAK,SAAAC,GAAcJ,EAAKN,MAAQU,IAC5BhJ,KAAKH,MAAWG,KAAKhB,MAF7B,CAGIiK,UAAU,aACVC,eAAgBxK,IAChByK,UACIvH,EAAAvC,EAAAwC,cAAA,UAAQtB,UAAU,0BAA0B6C,QAASpD,KAAKuE,aACtD3C,EAAAvC,EAAAwC,cAAA,YAAO,QAGfiE,KAAM9F,KAAK8F,KACX1I,KAAM4C,KAAKH,MAAM2G,WACjB4C,UAAWpJ,KAAKH,MAAMwJ,aAEtBzH,EAAAvC,EAAAwC,cAAA,SAAOtB,UAAU,yCAAyC4B,GAAG,YACzDP,EAAAvC,EAAAwC,cAAA,aACID,EAAAvC,EAAAwC,cAAA,UACID,EAAAvC,EAAAwC,cAAA,MAAItB,UAAYP,KAAK8F,KAAKwD,SAAoC,OAAtBtJ,KAAK8F,KAAKwD,SAAqB,eAAiB,eAAkB,UAAWlG,QAAS,SAAC5D,GAAD,OAAOoJ,EAAK9C,KAAKyD,iBAAiB/J,KAAhK,QACAoC,EAAAvC,EAAAwC,cAAA,kBACAD,EAAAvC,EAAAwC,cAAA,oBACAD,EAAAvC,EAAAwC,cAAA,sBAGRD,EAAAvC,EAAAwC,cAAA,aACK7B,KAAKsF,yBApKNxB,aAuLT0F,sBAVf,SAAyBxK,GACrB,MAAO,CACHyK,WAAYzK,EAAMyK,WAClBJ,WAAYrK,EAAMqK,WAClBK,WAAa1K,EAAM0K,WACnBlD,WAAYxH,EAAMwH,WAClBE,UAAW1H,EAAM0H,YAIV8C,CAAyB7E,oCCpMxC9F,EAAA8K,EAAAC,EAAA,sBAAApF,IAAA,IAAAqF,EAAAhL,EAAA,GAAAiL,EAAAjL,EAAAkL,EAAAF,GAWarF,EAAe,SAAAwF,GAAiC,IAA/BzJ,EAA+ByJ,EAA/BzJ,UAAWkE,EAAoBuF,EAApBvF,KAAoBuF,EAAdtF,SAE3C,OAAOoF,EAAAzK,EAAAwC,cAACiI,EAAAzK,EAAMyC,SAAP,KACOgI,EAAAzK,EAAAwC,cAAA,UAAQI,KAAK,SAAS1B,UAAWA,GAAYkE","file":"static/js/11.dfad64b0.chunk.js","sourcesContent":["import { FONT_COLOR,FONT_COLORS,PENDING, FULFILLED, REJECTED } from \"../../utility/constants\";\nimport { app } from \"../../config/app\";\nexport function save(data) {\n    let method = 'POST', url = \"createRecord\";\n    data = {\n        ...data,\n        modelName: \"promize_font_color\",\n        idKey: \"promize_font_color_id\"\n    }\n    if (data.promize_font_color_id) {\n        method = 'PUT';\n        url = 'updateRecord'\n        delete data.created_date;\n        delete data.updated_date;\n    }\n    return {\n        types: [`${FONT_COLOR}_${PENDING}`, `${FONT_COLOR}_${FULFILLED}`, `${FONT_COLOR}_${REJECTED}`],\n        method: method,\n        url: url,\n        data: data,\n        payload: { receiveType: 'postData' }\n    }\n}\n\nexport function getAllFontColors() {\n    let data = {\n        modelName: \"promize_font_color\",\n        idKey: \"promize_font_color_id\",\n        domain_id: app.DOMAIN_ID\n    }\n    const request = {\n        types: [`${FONT_COLORS}_${PENDING}`, `${FONT_COLORS}_${FULFILLED}`, `${FONT_COLORS}_${REJECTED}`],\n        method: 'POST',\n        url: 'getAllRecords',\n        data: data,\n    }\n\n    return request;\n}\n","module.exports = __webpack_public_path__ + \"static/media/color-picker.dfbc9764.png\";","import React from 'react';\nimport { SketchPicker } from 'react-color';\nimport reactCSS from 'reactcss'\nimport colorPicker from '../../assets/images/color-picker.png';\n\nclass InputColor extends React.Component {\n\tstate = {\n\t\tcolor: {\n\t\t\tr: '241',\n\t\t\tg: '112',\n\t\t\tb: '19',\n\t\t\ta: '1',\n\t\t},\n\t\tdisplayColorPicker: false\n\t}\n\n\thandleClick = e => {\n\t//\te.preventDefault()\n\t\tthis.setState({ displayColorPicker: !this.state.displayColorPicker })\n\t}\n\thandleColorChange = color => {\n\t\tthis.setState({ color: color.rgb })\n\t\tthis.props.handleChangeComplete(color)\n\t}\n\tclassNameCheck() {\n\t\tconst validation = this.props.form.validation(this.props.fieldName)\n\t\tconst message = validation ? this.props.state.inputErrors[this.props.fieldName].message : '';\n\t\tconst classValidation = `form-group ${validation ? 'feild-wrong' : ''} ${this.props.value && !validation ? 'feild-sucess' : ''}`\n\t\tconst className = this.props.validation ? classValidation : 'form-group';\n\t\treturn { 'className': className, 'message': message, 'validation': validation };\n\t}\n\n\tinput() {\n\t\tconst validation = this.classNameCheck();\n\t\tconst styles = reactCSS({\n\t\t\t'default': {\n\t\t\t\tcolor: {\n\t\t\t\t\twidth: '36px',\n\t\t\t\t\theight: '14px',\n\t\t\t\t\tborderRadius: '2px',\n\t\t\t\t\tbackground: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\n\t\t\t\t},\n\t\t\t\tswatch: {\n\t\t\t\t\tpadding: '4px 6px 0px',\n\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\tborderRadius: '1px',\n\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tzIndex: '2',\n\t\t\t\t\tbottom: '40px',\n\t\t\t\t\tright: '0',\n\t\t\t\t},\n\t\t\t\tcover: {\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: '0px',\n\t\t\t\t\tright: '0px',\n\t\t\t\t\tbottom: '70px',\n\t\t\t\t\tleft: '0px',\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\treturn (<React.Fragment><div className=\"promize-form-group promize-form-addon\">\n\t\t\t<div className=\"promize-picker-control\">\n\t\t\t\t<label htmlFor={this.props.fieldName} className=\"promize-form-control-label\">{this.props.labelName}{this.props.validation && <sup>*</sup>}</label>\n\t\t\t\t<input className=\"promize-form-control\"\n\t\t\t\t\ttype={this.props.inputType ? this.props.inputType : \"text\"}\n\t\t\t\t\tid={this.props.fieldName}\n\t\t\t\t\tstep={this.props.inputStep ? this.props.inputStep : \"\"}\n\t\t\t\t\tdata-type={this.props.dataType || \"text\"}\n\t\t\t\t\tdata-name={this.props.dataName}\n\t\t\t\t\tplaceholder={this.props.placeholder ? this.props.placeholder : \"\"}\n\t\t\t\t\tname={this.props.fieldName}\n\t\t\t\t\tonBlur={this.props.onBlur || this.props.form.blurEventListner}\n\t\t\t\t\tdisabled={this.props.disabled}\n\t\t\t\t\tonChange={this.props.onChange || this.props.form.handleFieldsChange}\n\t\t\t\t\tvalue={this.props.value}\n\t\t\t\t\tdata-validation-name={this.props.labelName}\n\t\t\t\t\tmaxLength={this.props.maxLength} />\n\t\t\t</div>\n\t\t\t<div className=\"promize-picker\">\n\t\t\t\t<div style={styles.swatch} onClick={this.handleClick}>\n\t\t\t\t\t<img src={colorPicker}/>\n\t\t\t\t\t{/* <div style={styles.color} /> */}\n\t\t\t\t</div>\n\t\t\t\t{this.state.displayColorPicker && <div style={styles.popover}>\n\t\t\t\t\t<div style={styles.cover} onClick={this.handleClick} />\n\t\t\t\t\t<SketchPicker\n\t\t\t\t\t\tdisableAlpha={true}\n\t\t\t\t\t\tcolor={this.props.state.fields.font_color_code}\n\t\t\t\t\t\tonChangeComplete={this.handleColorChange} />\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t{validation['validation'] && <span className=\"promize-form-error\">{`${this.props.labelName} ` + validation['message']}</span>}\n\t\t</div></React.Fragment >);\n\t}\n\n\trender() {\n\n\t\treturn (<React.Fragment>\n\t\t\t{this.input()}\n\t\t</React.Fragment>);\n\t}\n}\n\nexport default InputColor;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport reactCSS from 'reactcss'\nimport Input from '../../components/form/input';\nimport InputColor from '../../components/form/inputColor';\nimport { SubmitButton } from \"../../components/form/SubmitButton\";\nimport { app } from '../../config/app';\n\nexport function initialState() {\n    const initialState = {\n        filters: {\n            domain_id: app.DOMAIN_ID,\n            searchVal: '',\n            modelName: 'promize_font_color',\n            searchKey: 'font_color_name',\n            idKey: 'promize_font_color_id'\n        },\n        fields: {\n            font_color_name: '',\n            font_color_code: '',\n            domain_id: app.DOMAIN_ID,\n            status: 1\n        },\n        fonts: [],\n        inputErrors: {},\n    }\n    return initialState;\n}\n\nexport const validation = (props) => {\n    const rules = {\n        \"font_color_name\": \"required\",\n        \"font_color_code\": \"required\",\n    }\n    return rules;\n}\nclass Forms extends Component {\n    render() {\n        return <div className=\"promize-modal-cover\">\n        <div className=\"promize-modal modal-sm\">\n            <div className=\"promize-modal-header\">\n                <h3 className=\"modal-title\">\n                    <span>\n                        Add Font Color\n                    </span>\n                </h3>\n            </div>\n            <div className=\"promize-modal-body\">\n             <form onSubmit={this.props.font.handleSubmit} method=\"POST\">\n                <div className=\"df-wrap\">\n                    <div className=\"wd-100\">\n                        <Input {...this.props} form={this.props.font}\n                            fieldName={'font_color_name'}\n                            value={this.props.state.fields.font_color_name}\n                            labelName={\"Color Name\"}\n                            validation={false}\n                        />\n                    </div>\n                    <div className=\"wd-100\">\n                        <InputColor {...this.props} form={this.props.font}\n                            fieldName={'font_color_code'}\n                            value={this.props.state.fields.font_color_code}\n                            labelName={\"Color Code\"}\n                            validation={false}\n                        />\n                    </div>\n                    <div className=\"mt-20 wd-100 df df-end\">\n                        <button  className=\"btn btn-promize-secondary\" onClick={this.props.enablePopup}>Cancel</button>\n                        <SubmitButton className=\"btn btn-promize-primary\" text={\"Save\"} response={this.props.state.fields} />\n                    </div>\n\n                </div>\n                \n            </form >\n            </div>\n        </div>\n    </div>\n    }\n}\n\n\nexport default Forms;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { app } from '../../config/app';\nimport Grid from '../../utility/grid';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Table from '../../components/grid/Table';\nimport NoRecord from '../../components/grid/NoRecord';\nimport { FONT_COLORS, FONT, FONT_DELETE, FONT_STATUS_UPDATE } from \"../../utility/constants\";\nimport Form from '../../utility/Form';\nimport { save } from '../../actions/fontcolor';\nimport Forms, { initialState, validation } from \"./form\";\nimport toastr from 'toastr';\n\nclass Fontcolor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            openPopup : false\n        }\n        this.displayRows = this.displayRows.bind(this);\n        this.state = initialState();\n        const formValidation = validation();\n        this.grid = Grid.getInstance({ currentComponent: this, url: 'getListsWithPagination', actionType: FONT_COLORS, method: 'POST' });\n\n        this.font = Form.getInstance(\n            this,formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields));\n                this.resetForm();\n            },\n            {},\n            {}\n        );   \n    }\n    initialState() {\n        return {\n            filters: {\n                domain_id: this.props.app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_font_color',\n                searchKey: 'font_color_name',\n                idKey: 'promize_font_color_id'\n            },\n            fields :{\n                font_color_name : '',\n                font_color_code : '',\n                domain_id : app.DOMAIN_ID,\n                status : 1\n            },\n            fonts: [],\n            inputErrors:{},\n        }\n    }\n\n    componentDidMount() {\n        this.grid.getRecords();\n    }\n    resetForm(){\n        let fields = {\n            font_color_name : '',\n            font_color_code : '',\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields},()=>{\n            this.grid.getRecords();\n        })\n    }\n\n    setData(props) {\n        const response = props.fontcolors.response;\n        const fontResponse = props.fontcolor.response;\n        if (response !== this.props.fontcolors.response) {\n            if (!props.fontcolors.isFetching &&  response.data && Object.keys(response.data).length > 0 && response.status && response.status === 200) {\n                this.setState({ fonts: response.data || [], openPopup : false });\n            }\n            else if (!props.fontcolors.isFetching && props.fontcolors.isError) {\n                this.setState({ fonts: [] });\n            }\n        }\n        console.log(\"out\")\n        if (fontResponse !== this.props.fontcolor.response) {\n            console.log(\"in\")\n            if (!props.fontcolor.isFetching && props.fontcolor.response.data && Object.keys(props.fontcolor.response.data).length > 0 && props.fontcolor.response.status && props.fontcolor.response.status === 200) {\n                toastr.success(props.fontcolor.response.message)\n                this.setState({ openPopup : false });\n            }\n            else if (!props.fontcolor.isFetching && props.fontcolor.isError) {\n                toastr.error(props.fontcolor.response.message)\n            }\n        }\n    }\n    editFont(e, font){\n        e.preventDefault();\n        this.setState({fields : font,openPopup : !this.state.openPopup});\n    }\n    displayRows() {\n        const fonts = this.state.fonts;\n        let fontRows = <NoRecord isFetching={this.props.fontcolors.isFetching} colspan=\"10\" />;\n        if (fonts.length > 0) {\n            fontRows = fonts.map((font, index) => {\n                var status = (font.status == 1) ? true : false;\n                //var clipart_category_image = clipart.\n                return <tr key={index}>\n                    <td>{font.font_color_name}</td>\n                    <td>{font.font_color_code}</td>\n                    <td>\n                        <Switchtoggle  {...this.props} \n                            value={status}\n                            fieldName={'status'}\n                            id={font.promize_font_color_id}\n                            onChange={(e) => { this.grid.statusUpdate({ url: \"changeStatus\", actionType: FONT_STATUS_UPDATE, params: font, modelName: \"promize_font_color\",\n                            PKey: \"promize_font_color_id\" }, e) }}\n                            spanLabel={{ first: 'Active', second: 'InActive' }}\n                            checkValue={{ first: true, second: false }}\n                        />\n                    </td>\n                    <td>\n                        <div className=\"table-actions\">\n                            <button className=\"btn-tbl edit\" onClick={(e) => this.editFont(e,font)}><i className=\"fa fa-pencil-alt\"></i></button>\n                            <button className=\"btn-tbl delete\" onClick={(e) => this.table.delete.handleToogleModal({ id: font.promize_font_color_id, idKey: 'ids', url: 'deleteRecord', actionType: FONT_DELETE, modelName: \"promize_font_color\", PKey: \"promize_font_color_id\" }, e)}><i className=\"fa fa-trash-alt\"></i></button>\n                        </div>\n                    </td>\n                </tr>\n            })\n        }\n        return fontRows;\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setData(nextProps);\n    }\n    handleChangeComplete = (color) => {\n        let field = this.state.fields;\n        let obj = { ...field, font_color_code: color.hex}\n        this.setState({ fields: obj });\n    };\n    enablePopup = () =>{\n        let fields = {\n            font_color_name : '',\n            font_color_code : '',\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields, openPopup : !this.state.openPopup})\n    }\n    render() {\n        return (\n            <React.Fragment>\n                  {this.state.openPopup && <div>\n                       <Forms {...this} font={this.font} handleChangeComplete={this.handleChangeComplete} enablePopup={this.enablePopup} currentComponent = {this}/>\n                    </div>\n                    }\n            <Table\n                ref={instance => { this.table = instance; }}\n                {...this.props} {...this.state}\n                pageTitle=\"Font Color\"\n                managementType={FONT_COLORS}\n                addButton={\n                    <button className=\"btn btn-promize-primary\" onClick={this.enablePopup}>\n                        <span>{\"Add\"}</span>\n                    </button>\n                }\n                grid={this.grid}\n                data={this.props.fontcolors}\n                rowDelete={this.props.fontDelete}\n            >\n                <table className=\"promize-table table-hover table-action\" id=\"fixTable\">\n                    <thead>\n                        <tr>\n                            <th className={(this.grid.sortType) ? ((this.grid.sortType == 'ASC') ? \"sorting-asec\" : \"sorting-desc\") : \"sorting\"} onClick={(e) => this.grid.handleColSorting(e)}>Name</th>\n                            <th>Code</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.displayRows()}\n                    </tbody>\n                </table>\n            </Table>\n            </React.Fragment>)\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        fontStatus: state.fontStatus,\n        fontDelete: state.fontDelete,\n        fileUpload : state.fileUpload,\n        fontcolors: state.fontcolors,\n        fontcolor: state.fontcolor,\n    };\n}\n\nexport default connect(mapStateToProps)(Fontcolor);\n","import React from 'react';\n\n /*\n    * State allows React components to change their output over time in response to user actions, \n     *network responses, and anything else, without violating this rule\n     * React elements are plain objects\n     * React DOM compares the element and its children to the previous one, \n     * and only applies the DOM updates necessary to bring the DOM to the desired state\n     * To render a React element into a root DOM node\n     * node whose contents has changed gets updated by React DOM\n    */\nexport const SubmitButton = ({className, text, response}) => {\n            \n    return <React.Fragment>\n                { <button type=\"submit\" className={className}>{text}</button> }\n           </React.Fragment>\n}"],"sourceRoot":""}