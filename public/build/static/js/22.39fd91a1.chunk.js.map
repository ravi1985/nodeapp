{"version":3,"sources":["containers/Orders/index.jsx"],"names":["Orders","props","_this","Object","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","displayRows","bind","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","state","initialState","grid","Grid","getInstance","currentComponent","url","actionType","ORDERS","method","filters","domain_id","app","DOMAIN_ID","searchVal","orders","sortVal","getRecords","response","isFetching","keys","data","length","status","setState","isError","orderRows","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_grid_NoRecord__WEBPACK_IMPORTED_MODULE_11__","colspan","map","order","index","date","Date","created_date","getDate","getMonth","getFullYear","key","promize_order_id","client_product_name","ordered_quantity","nextProps","setData","_this2","_components_grid_Table__WEBPACK_IMPORTED_MODULE_10__","assign","ref","instance","table","pageTitle","managementType","ORDER","className","id","sortType","onClick","e","handleColSorting","Component","connect"],"mappings":"mNASMA,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKU,MAAQV,EAAKW,eAClBX,EAAKY,KAAOC,IAAKC,YAAY,CAACC,iBAAiBd,OAAAQ,EAAA,EAAAR,CAAAD,GAAOgB,IAAK,gBAAiBC,WAAYC,IAAQC,OAAQ,SAJzFnB,8EAOf,MAAO,CACHoB,QAAQ,CACJC,UAAYlB,KAAKJ,MAAMuB,IAAIC,UAC3BC,UAAW,IAEfC,OAAQ,GACRC,QAAS,gDAKbvB,KAAKS,KAAKe,6CAON5B,GACJ,IAAM6B,EAAW7B,EAAM0B,OAAOG,SAC3BA,IAAazB,KAAKJ,MAAM0B,OAAOG,YAC1B7B,EAAM0B,OAAOI,YAAc5B,OAAO6B,KAAKF,EAASG,MAAMC,OAAS,GAAKJ,EAASK,QAA8B,MAApBL,EAASK,OAChG9B,KAAK+B,SAAS,CAACT,OAAQG,EAASG,MAAQ,MAEnChC,EAAM0B,OAAOI,YAAc9B,EAAM0B,OAAOU,SAE7ChC,KAAK+B,SAAS,CAACT,OAAQ,4CAY/B,IAAMA,EAAStB,KAAKO,MAAMe,OACtBW,EAAYC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUX,WAAY1B,KAAKJ,MAAM0B,OAAOI,WAAYY,QAAQ,OAa5E,OAZGhB,EAAOO,OAAS,IACfI,EAAYX,EAAOiB,IAAI,SAACC,EAAOC,GAC3B,IAAIC,EAAO,IAAIC,KAAKH,EAAMI,cAE1B,OADAF,EAAOA,EAAKG,UAAY,IAAKH,EAAKI,WAAa,IAAMJ,EAAKK,cACnDb,EAAAC,EAAAC,cAAA,MAAIY,IAAKP,GACZP,EAAAC,EAAAC,cAAA,UAAKI,EAAMS,kBACXf,EAAAC,EAAAC,cAAA,UAAKI,EAAMU,qBACXhB,EAAAC,EAAAC,cAAA,UAAKI,EAAMW,kBACXjB,EAAAC,EAAAC,cAAA,UAAKM,OAIVT,oDAGemB,GACtBpD,KAAKqD,QAAQD,oCAGR,IAAAE,EAAAtD,KAEL,OAAOkC,EAAAC,EAAAC,cAACmB,EAAA,EAADzD,OAAA0D,OAAA,CACCC,IAAK,SAAAC,GAAcJ,EAAKK,MAAQD,IAC5B1D,KAAKJ,MAAWI,KAAKO,MAF1B,CAGCqD,UAAY,SACZC,eAAgBC,IAChBrD,KAAMT,KAAKS,KACXmB,KAAM5B,KAAKJ,MAAM0B,SAEbY,EAAAC,EAAAC,cAAA,SAAO2B,UAAU,yCAAyCC,GAAG,YACzD9B,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,MAAI2B,UAAY/D,KAAKS,KAAKwD,SAAqC,OAAtBjE,KAAKS,KAAKwD,SAAqB,eAAiB,eAAkB,UAAWC,QAAS,SAACC,GAAD,OAAOb,EAAK7C,KAAK2D,iBAAiBD,KAAjK,gBACAjC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,0BAGJF,EAAAC,EAAAC,cAAA,aAEMpC,KAAKI,wBAzFdiE,aAiGNC,sBAAQ,SAAC/D,GACpB,MAAO,CACHe,OAAOf,EAAMe,SAFNgD,CAIZ3E","file":"static/js/22.39fd91a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport Grid from '../../utility/grid';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Table from '../../components/grid/Table';\nimport NoRecord from '../../components/grid/NoRecord';\nimport { ORDERS,ORDER } from \"../../utility/constants\";\n\nclass Orders extends Component {\n\n    constructor(props) {\n        super(props);\n        this.displayRows = this.displayRows.bind(this);\n        this.state = this.initialState();\n        this.grid = Grid.getInstance({currentComponent: this, url: 'getOrderLists', actionType: ORDERS, method: 'POST'});\n    }\n    initialState(){\n        return {\n            filters:{\n                domain_id : this.props.app.DOMAIN_ID,\n                searchVal: '',\n            },        \n            orders: [],\n            sortVal: ''\n        }\n    }\n\n    componentDidMount(){\n        this.grid.getRecords();\n    }\n\n    /**\n     * Check whether the customer list empty or not.\n     * If not empty, set the customer to class 'customers' property\n     */\n    setData(props){\n        const response = props.orders.response;\n        if(response !== this.props.orders.response){\n            if(!props.orders.isFetching && Object.keys(response.data).length > 0 && response.status && response.status === 200){\n                this.setState({orders: response.data || []});\n            }\n            else if(!props.orders.isFetching && props.orders.isError){\n                // reset the customers value\n                this.setState({orders: []});\n            }\n        }\n    }\n\n    /**\n     * Handle the table rows list based on data\n     * @param object\n     *\n     * @return array|string\n     */\n    displayRows(){\n        const orders = this.state.orders;\n        let orderRows = <NoRecord isFetching={this.props.orders.isFetching} colspan=\"10\"/>;\n        if(orders.length > 0){ \n            orderRows = orders.map((order, index)=>{\n                var date = new Date(order.created_date);\n                date = date.getDate() + '-' +date.getMonth() + '-' + date.getFullYear();\n                return <tr key={index}>\n                    <td>{order.promize_order_id}</td>\n                    <td>{order.client_product_name}</td>\n                    <td>{order.ordered_quantity}</td>                           \n                    <td>{date}</td>\n                </tr>\n            })\n        }\n        return orderRows;\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setData(nextProps);\n    }\n\n    render() {\n\n        return <Table\n                ref={instance => { this.table = instance; }}\n                {...this.props} {...this.state}\n                pageTitle = \"Orders\"\n                managementType={ORDER}\n                grid={this.grid}\n                data={this.props.orders}\n                >\n                    <table className=\"promize-table table-hover table-action\" id=\"fixTable\">\n                        <thead>\n                        <tr>\n                            <th>Order ID</th>\n                            <th className={(this.grid.sortType) ? (( this.grid.sortType == 'ASC') ? \"sorting-asec\" : \"sorting-desc\") : \"sorting\"} onClick={(e) => this.grid.handleColSorting(e)}>Product Name</th>\n                            <th>Order Quantity</th>\n                            <th>Order Date</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n\n                            { this.displayRows() }\n\n                        </tbody>\n                    </table>\n        </Table>\n    }\n}\n\nexport default connect((state) => {\n    return {\n        orders:state.orders,\n    };\n})(Orders);\n"],"sourceRoot":""}