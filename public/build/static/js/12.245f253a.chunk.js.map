{"version":3,"sources":["actions/fontfamily/index.jsx","components/files/FileUpload.jsx","containers/Fontfamily/form.jsx","containers/Fontfamily/index.jsx","components/form/SubmitButton.jsx"],"names":["save","data","method","url","Object","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","modelName","idKey","font_id","created_date","updated_date","types","concat","FONT","PENDING","FULFILLED","REJECTED","payload","receiveType","uploadFontFile","file","typeName","name","formData","FormData","append","FILE_UPLOAD","requestBodyType","getAllFonts","domain_id","app","DOMAIN_ID","FONTS","FileUpload","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","change","bind","assertThisInitialized","onDrop","onDragOver","onDragLeave","e","filename","target","value","split","length","_this$props","fields","inputErrors","objectSpread","font_file","currentComponent","setState","form","handleFileSelect","acceptedFiles","handleFileDrop","files","highlight","_this2","error","fieldName","react_default","a","createElement","dist_es","_ref","getRootProps","getInputProps","Fragment","assign","className","labelName","type","id","onChange","accept","Component","connect","state","image","validation","font_name","Forms","onSubmit","font","handleSubmit","input","font_code","files_FileUpload","dataName","onClick","enablePopup","SubmitButton","text","response","fileUpload","fonts","Fontfamily","status","openPopup","displayRows","filters","searchVal","searchKey","formValidation","grid","Grid","getInstance","actionType","Form","dispatch","resetForm","views","getRecords","_this3","fontResponse","isFetching","keys","isError","toastr","success","message","preventDefault","_this4","fontRows","NoRecord","colspan","map","index","key","switchtoggle","statusUpdate","FONT_STATUS_UPDATE","params","PKey","spanLabel","first","second","checkValue","editFont","table","delete","handleToogleModal","FONT_DELETE","nextProps","setData","_this5","Fontfamily_form","Table","ref","instance","pageTitle","managementType","addButton","rowDelete","fontDelete","sortType","handleColSorting","fontStatus","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n"],"mappings":"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","file":"static/js/12.245f253a.chunk.js","sourcesContent":["import { FONT, FONTS, PENDING,FILE_UPLOAD, FULFILLED, REJECTED } from \"../../utility/constants\";\nimport { app } from \"../../config/app\";\n\nexport function save(data) {\n    let method = 'POST', url = \"createRecord\";\n    data = {\n        ...data,\n        modelName: \"promize_fonts\",\n        idKey: \"font_id\"\n    }\n    if (data.font_id) {\n        method = 'PUT';\n        url = 'updateRecord'\n        delete data.created_date;\n        delete data.updated_date;\n    }\n    return {\n        types: [`${FONT}_${PENDING}`, `${FONT}_${FULFILLED}`, `${FONT}_${REJECTED}`],\n        method: method,\n        url: url,\n        data: data,\n        payload: { receiveType: 'postData' }\n    }\n}\n\nexport function uploadFontFile(file, typeName, name) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', typeName);\n    return {\n        types: [`${FILE_UPLOAD}_${PENDING}`, `${FILE_UPLOAD}_${FULFILLED}`, `${FILE_UPLOAD}_${REJECTED}`],\n        method: 'POST',\n        requestBodyType: 'FormData',\n        url: 'uploadFontFile',\n        data: formData,\n        payload: { receiveType: 'postData' }\n    }\n}\n\nexport function getAllFonts() {\n    let data = {\n        modelName: \"promize_fonts\",\n        idKey: \"font_id\",\n        domain_id: app.DOMAIN_ID\n    }\n    const request = {\n        types: [`${FONTS}_${PENDING}`, `${FONTS}_${FULFILLED}`, `${FONTS}_${REJECTED}`],\n        method: 'POST',\n        url: 'getAllRecords',\n        data: data,\n    }\n\n    return request;\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Dropzone from 'react-dropzone'\n\nclass FileUpload extends Component {\n\n    constructor(props) {\n        super(props);\n        this.change = this.change.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.onDragLeave = this.onDragLeave.bind(this);\n    }\n\n    change(e) {\n        var str = e.target.value;\n        let filename = str.split('\\\\');\n        let length = filename.length -1;\n        filename = filename[length];\n        let {fields, inputErrors} = this.props;\n        fields = {\n            ...fields,\n            font_file : filename\n        }\n        inputErrors = {}\n        this.props.currentComponent.setState({fields, inputErrors})\n        this.props.form.handleFileSelect(e);\n    }\n\n    onDrop(acceptedFiles) {\n        this.props.form.handleFileDrop({ \"files\": acceptedFiles }, \"font_file\")\n        this.setState({ highlight: false })\n    }\n\n    onDragOver(e) {\n        this.setState({ highlight: true })\n    }\n\n    onDragLeave(e) {\n        this.setState({ highlight: false })\n    }\n\n    render() {\n        let error = this.props.error[this.props.fieldName] ? true : false ;\n        return (<Dropzone onDrop={acceptedFiles => this.props.form.handleFileDrop({ \"files\": acceptedFiles }, \"image_file\")}>\n            {({ getRootProps, getInputProps }) => (\n                <React.Fragment>\n                <div className=\"promize-upload\" {...getRootProps()}>\n                    <div className=\"promize-upload-header\">\n                        <label className=\"promize-upload-title\">{this.props.labelName}</label>\n                        <div className=\"custom-upload-product\">\n                            <div className=\"promize-upload-button\">\n                                <input {...getInputProps()} type=\"file\" name=\"image_file\" id=\"image_file\" onChange={this.change} accept=\".ttf\" />\n                                <span className=\"file-custom\">Upload File</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"promize-upload-content\">\n                        <div className=\"promize-content-before-upload\">\n                            <p>{this.props.value ? this.props.value  : <><i className=\"fa fa-upload mr-15\"></i>Browse the file</>}</p>\n                        </div>\n                    </div>\n                    {error && <span className=\"promize-form-error\">{`${this.props.labelName} ` + \"Required\"}</span> }    \n                </div>\n                </React.Fragment>\n            )}\n        </Dropzone>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { image } = state;\n    return {\n        image\n    };\n}\n\nexport default connect(mapStateToProps)(FileUpload);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport Input from '../../components/form/input';\nimport FileUpload from '../../components/files/FileUpload';\nimport { SubmitButton } from \"../../components/form/SubmitButton\";\nimport { app } from '../../config/app';\n\nexport function initialState () {\n     const initialState = {\n        filters: {\n            domain_id: app.DOMAIN_ID,\n            searchVal: '',\n            modelName: 'promize_fonts',\n            searchKey: 'font_name',\n            idKey: 'font_id'\n        },\n        fields :{\n            font_name : '',\n            font_code : '',\n            font_file : '',\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        },\n        fonts: [],\n        inputErrors:{},\n    }\n\n    return initialState;\n}\n\nexport const validation = (props) => {\n    const rules = {\n        \"font_name\":\"required\",\n        \"font_file\" : \"required\"\n    }\n    return rules;\n}\nclass Forms extends Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n        return <div className=\"promize-modal-cover\">\n        <div className=\"promize-modal modal-sm\">\n            <div className=\"promize-modal-header\">\n                <h3 className=\"modal-title\">\n                    <span>\n                        Add Font Family\n                    </span>\n                </h3>\n            </div>\n            <div className=\"promize-modal-body\">\n              <form onSubmit={this.props.font.handleSubmit}  method=\"POST\">\n                <div className=\"df-wrap\">\n                    <div className=\"wd-100\">\n                        <Input {...this.props} form ={this.props.font}\n                            fieldName = {'font_name'}\n                            value={this.props.state.fields.font_name}\n                            labelName={\"Font Name\"}\n                            validation={false}\n                        /> \n                    </div>\n                    <div className=\"wd-100\">\n                        <Input {...this.props} form ={this.props.font}\n                            fieldName = {'font_code'}\n                            value={this.props.state.fields.font_code}\n                            labelName={\"Font Code\"}\n                            validation={false}\n                        /> \n                    </div>\n                    <div className=\"wd-100\">\n                        <FileUpload {...this.props.state} form ={this.props.font} currentComponent={this.props.currentComponent}\n                            labelName={\"Font File\"}\n                            fieldName={'font_file'}\n                            dataName={'font_file'}\n                            validation={false}\n                            value = {this.props.state.fields.font_file}\n                            error = {this.props.state.inputErrors}\n                        /> \n                    </div>\n                    <div className=\"mt-20 wd-100 df df-end\">\n                        <button  className=\"btn btn-promize-secondary\" onClick={this.props.enablePopup}>Cancel</button>\n                        <SubmitButton className=\"btn btn-promize-primary\" text={\"Save\"} response={this.props.state.fields} />  \n                    </div>\n                </div>       \n            </form>\n            </div>\n        </div>\n    </div>\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        fileUpload : state.fileUpload,\n        fonts: state.fonts,\n    };\n}\n\n\nexport default connect(mapStateToProps)(Forms);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { app } from '../../config/app';\nimport Grid from '../../utility/grid';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Table from '../../components/grid/Table';\nimport NoRecord from '../../components/grid/NoRecord';\nimport { FONTS, FONT, FONT_DELETE, FONT_STATUS_UPDATE } from \"../../utility/constants\";\nimport Form from '../../utility/Form';\nimport { save, uploadFontFile } from '../../actions/fontfamily';\nimport Forms, { initialState, validation } from \"./form\";\nimport toastr from 'toastr';\n\nclass Fontfamily extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            openPopup : false\n        }\n        this.displayRows = this.displayRows.bind(this);\n        this.state = initialState();\n      //  this.initialState = initialState();\n        const formValidation = validation();\n        this.grid = Grid.getInstance({ currentComponent: this, url: 'getListsWithPagination', actionType: FONTS, method: 'POST' });\n\n        this.font = Form.getInstance(\n            this,formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields));\n                this.resetForm();\n            },\n            (views) => {\n                this.props.dispatch(uploadFontFile(views, 'font_file', 'fileUpload'))\n            },\n            {}\n        );   \n    }\n    initialState(){\n        return {\n            filters: {\n                domain_id: app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_fonts',\n                searchKey: 'font_name',\n                idKey: 'font_id'\n            },\n            fonts: [],\n        }\n    }\n\n    componentDidMount() {\n        this.grid.getRecords();\n    }\n    resetForm(){\n        let fields = {\n            font_name : '',\n            font_code : '',\n            font_file : '',\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields},()=>{\n            this.grid.getRecords();\n        })\n    }\n\n    setData(props) {\n        const response = props.fonts.response;\n        const fontResponse = props.font.response;\n        if (response !== this.props.fonts.response) {\n            if (!props.fonts.isFetching && response.data && Object.keys(response.data).length > 0 && response.status && response.status === 200) {\n                this.setState({ fonts: response.data || [], openPopup : false});\n            }\n            else if (!props.fonts.isFetching && props.fonts.isError) {\n                this.setState({ fonts: [] });\n            }\n        }\n        if (fontResponse !== this.props.font.response) {\n            if (!props.font.isFetching && response.data && Object.keys(response.data).length > 0 &&response.status && response.status === 200) {\n                toastr.success(props.font.response.message)\n                this.setState({ openPopup : false },()=>{\n                    this.resetForm()\n                });\n            }\n            else if (!props.font.isFetching && props.font.isError) {\n                toastr.error(props.font.response.message)\n            }\n        }\n    }\n    editFont(e, font){\n        e.preventDefault();\n        this.setState({fields : font,openPopup : !this.state.openPopup});\n    }\n    displayRows() {\n        const fonts = this.state.fonts;\n        let fontRows = <NoRecord isFetching={this.props.fonts.isFetching} colspan=\"10\" />;\n        if (fonts.length > 0) {\n            fontRows = fonts.map((font, index) => {\n                var status = (font.status == 1) ? true : false;\n                //var clipart_category_image = clipart.\n                return <tr key={index}>\n                    <td>{font.font_name}</td>\n                    <td>\n                        <Switchtoggle  {...this.props} \n                            value={status}\n                            fieldName={'status'}\n                            id={font.font_id}\n                            onChange={(e) => { this.grid.statusUpdate({ url: \"changeStatus\", actionType: FONT_STATUS_UPDATE, params: font, modelName: \"promize_fonts\",\n                            PKey: \"font_id\" }, e) }}\n                            spanLabel={{ first: 'Active', second: 'InActive' }}\n                            checkValue={{ first: true, second: false }}\n                        />\n                    </td>\n                    <td>\n                        <div className=\"table-actions\">\n                            <button className=\"btn-tbl edit\" onClick={(e) => this.editFont(e,font)}><i className=\"fa fa-pencil-alt\"></i></button>\n                            <button className=\"btn-tbl delete\" onClick={(e) => this.table.delete.handleToogleModal({ id: font.font_id, idKey: 'ids', url: 'deleteRecord', actionType: FONT_DELETE, modelName: \"promize_fonts\", PKey: \"font_id\" }, e)}><i className=\"fa fa-trash-alt\"></i></button>\n                        </div>\n                    </td>\n                </tr>\n            })\n        }\n        return fontRows;\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setData(nextProps);\n    }\n    enablePopup = () =>{\n        let fields = {\n            font_name : '',\n            font_code : '',\n            font_file : '',\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields, openPopup : !this.state.openPopup})\n    }\n    render() {\n        return (\n            <React.Fragment>              \n                {this.state.openPopup && <div>\n                       <Forms {...this} font={this.font} enablePopup={this.enablePopup} currentComponent = {this}/>\n                    </div>\n                    }\n            <Table\n                ref={instance => { this.table = instance; }}\n                {...this.props} {...this.state}\n                pageTitle=\"Fonts\"\n                managementType={FONT}\n                addButton={\n                    <button className=\"btn btn-promize-primary\" onClick={this.enablePopup}>\n                        <span>{\"Add\"}</span>\n                    </button>\n                }\n                grid={this.grid}\n                data={this.props.fonts}\n                rowDelete={this.props.fontDelete}\n            >\n                <table className=\"promize-table table-hover table-action\" id=\"fixTable\">\n                    <thead>\n                        <tr>\n                            <th className={(this.grid.sortType) ? ((this.grid.sortType == 'ASC') ? \"sorting-asec\" : \"sorting-desc\") : \"sorting\"} onClick={(e) => this.grid.handleColSorting(e)}>Name</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.displayRows()}\n                    </tbody>\n                </table>\n            </Table>\n            </React.Fragment>)\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        fontStatus: state.fontStatus,\n        fontDelete: state.fontDelete,\n        fileUpload : state.fileUpload,\n        fonts: state.fonts,\n        font: state.font,\n    };\n}\n\nexport default connect(mapStateToProps)(Fontfamily);\n","import React from 'react';\n\n /*\n    * State allows React components to change their output over time in response to user actions, \n     *network responses, and anything else, without violating this rule\n     * React elements are plain objects\n     * React DOM compares the element and its children to the previous one, \n     * and only applies the DOM updates necessary to bring the DOM to the desired state\n     * To render a React element into a root DOM node\n     * node whose contents has changed gets updated by React DOM\n    */\nexport const SubmitButton = ({className, text, response}) => {\n            \n    return <React.Fragment>\n                { <button type=\"submit\" className={className}>{text}</button> }\n           </React.Fragment>\n}"],"sourceRoot":""}