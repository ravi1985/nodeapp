{"version":3,"sources":["actions/fontsize/index.jsx","containers/Fontsize/form.jsx","containers/Fontsize/index.jsx","components/form/SubmitButton.jsx"],"names":["save","data","method","url","Object","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","font_size","parseInt","modelName","idKey","font_size_id","created_date","updated_date","types","concat","FONT_SIZE","PENDING","FULFILLED","REJECTED","payload","receiveType","getAllFontSizes","domain_id","app","DOMAIN_ID","FONT_SIZES","validation","props","Forms","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","title","onSubmit","font","handleSubmit","input","assign","form","fieldName","value","state","fields","labelName","inputType","onClick","enablePopup","SubmitButton","text","response","Component","Fontsize","_this","status","setState","openPopup","isEdit","displayRows","bind","assertThisInitialized","filters","searchVal","searchKey","fontSizes","inputErrors","formValidation","grid","Grid","getInstance","currentComponent","actionType","Form","dispatch","resetForm","getRecords","_this2","_this3","sizeResponse","fontSize","isFetching","keys","length","isError","toastr","success","message","err","name","error","e","preventDefault","_this4","fontRows","NoRecord","colspan","map","index","key","switchtoggle","id","font_id","onChange","statusUpdate","FONT_SIZE_STATUS_UPDATE","params","PKey","spanLabel","first","second","checkValue","editFont","table","delete","handleToogleModal","FONT_SIZE_DELETE","nextProps","setData","_this5","Fragment","Fontsize_form","Table","ref","instance","pageTitle","addButton","managementType","rowDelete","fontSizeDelete","sortType","handleColSorting","connect","fontSizeStatus","fontsizes","fontsize","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref","type"],"mappings":"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","file":"static/js/13.c1f7c541.chunk.js","sourcesContent":["import { FONT_SIZE,FONT_SIZES,PENDING, FULFILLED, REJECTED } from \"../../utility/constants\";\nimport { app } from \"../../config/app\";\n\nexport function save(data) {\n    let method = 'POST', url = \"createRecord\";\n    data = {\n        ...data,\n        font_size : parseInt(data.font_size),\n        modelName: \"promize_font_size\",\n        idKey: \"font_size_id\"\n    }\n    if (data.font_size_id) {\n        method = 'PUT';\n        url = 'updateRecord'\n        delete data.created_date;\n        delete data.updated_date;\n    }\n    return {\n        types: [`${FONT_SIZE}_${PENDING}`, `${FONT_SIZE}_${FULFILLED}`, `${FONT_SIZE}_${REJECTED}`],\n        method: method,\n        url: url,\n        data: data,\n        payload: { receiveType: 'postData' }\n    }\n}\n\nexport function getAllFontSizes() {\n    let data = {\n        modelName: \"promize_font_size\",\n        idKey: \"font_size_id\",\n        domain_id: app.DOMAIN_ID\n    }\n    const request = {\n        types: [`${FONT_SIZES}_${PENDING}`, `${FONT_SIZES}_${FULFILLED}`, `${FONT_SIZES}_${REJECTED}`],\n        method: 'POST',\n        url: 'getAllRecords',\n        data: data,\n    }\n\n    return request;\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport Input from '../../components/form/input';\nimport { SubmitButton } from \"../../components/form/SubmitButton\";\nimport { app } from '../../config/app';\n\nexport function initialState () {\n     const initialState = {\n            filters: {\n                domain_id: app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_font_size',\n                searchKey: 'font_size',\n                idKey: 'font_size_id'\n            },\n            fields :{\n                font_size : null,\n                domain_id : app.DOMAIN_ID,\n                status : 1\n            },\n            fontSizes: [],\n            inputErrors:{},\n        }\n    return initialState;\n}\n\nexport const validation = (props) => {\n    const rules = {\n        \"font_size\":\"required\",\n    }\n    return rules;\n}\nclass Forms extends Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n        return <div className=\"promize-modal-cover\">\n        <div className=\"promize-modal modal-sm\">\n            <div className=\"promize-modal-header\">\n                <h3 className=\"modal-title\">\n                    <span>\n                        {this.props.title}\n                    </span>\n                </h3>\n            </div>\n            <div className=\"promize-modal-body\">\n               <form onSubmit={this.props.font.handleSubmit}  method=\"POST\">\n                    {/* <div className=\"df\"> */}\n                        <div className=\"wd-100\">\n                            <Input {...this.props} form ={this.props.font}\n                                fieldName = {'font_size'}\n                                value={this.props.state.fields.font_size ? this.props.state.fields.font_size : ''}\n                                labelName={\"Font Size\"}\n                                validation={false}\n                                inputType={'number'}\n                            /> \n                        </div>\n                        <div className=\"wd-100 df df-end\">\n                        <button  className=\"btn btn-promize-secondary\" onClick={this.props.enablePopup}>Cancel</button>\n                        <SubmitButton className=\"btn btn-promize-primary\" text={\"Save\"} response={this.props.state.fields} />  \n                        {/* </div> */}\n                    </div>    \n                </form>\n            </div>\n        </div>\n    </div>\n    }\n}\n\n\nexport default Forms","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { app } from '../../config/app';\nimport Grid from '../../utility/grid';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Table from '../../components/grid/Table';\nimport NoRecord from '../../components/grid/NoRecord';\nimport { FONT_SIZES, FONT_SIZE, FONT_SIZE_DELETE, FONT_SIZE_STATUS_UPDATE } from \"../../utility/constants\";\nimport Form from '../../utility/Form';\nimport { save } from '../../actions/fontsize';\nimport Forms, { initialState, validation } from \"./form\";\nimport toastr from 'toastr';\n\n\nclass Fontsize extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            openPopup : false,\n            isEdit : false\n        }\n        this.displayRows = this.displayRows.bind(this);\n        this.state = initialState();\n        const formValidation = validation();\n        this.grid = Grid.getInstance({ currentComponent: this, url: 'getListsWithPagination', actionType: FONT_SIZES, method: 'POST' });\n\n        this.font = Form.getInstance(\n            this,formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields));\n                this.resetForm();\n\n            },\n            {},\n            {}\n        );   \n    }\n    initialState(){\n        return {\n            filters: {\n                domain_id: app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_font_size',\n                searchKey: 'font_size',\n                idKey: 'font_size_id'\n            },\n            fontSizes: [],\n        }\n    }\n\n    componentDidMount() {\n        this.grid.getRecords();\n    }\n    resetForm(){\n        let fields = {\n            font_size : null,\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields},()=>{\n            this.grid.getRecords();\n        })\n    }\n\n    setData(props) {\n        const response = props.fontSizes.response;\n        const sizeResponse = props.fontSize.response\n        if (response !== this.props.fontSizes.response) {\n            if (!props.fontSizes.isFetching  && response.data && Object.keys(response.data).length > 0 && response.status && response.status === 200) {\n                this.setState({ fontSizes: response.data || [], openPopup : false });\n            }\n            else if (!props.fontSizes.isFetching && props.fontSizes.isError) {\n                this.setState({ fontSizes: [] });\n            }\n        }\n        if (sizeResponse !== this.props.fontSize.response) {\n            if (!props.fontSize.isFetching && !props.fontSize.isError && response.data && Object.keys(response.data).length > 0 &&response.status && response.status === 200) {\n                //SequelizeUniqueConstraintError\n                \n                toastr.success(props.fontSize.response.message)\n                this.setState({ openPopup : false },()=>{\n                    this.resetForm()\n                });\n            }\n            else if (!props.fontSize.isFetching && props.fontSize.isError) {\n                if(props.fontSize.response.err && props.fontSize.response.err.name == \"SequelizeUniqueConstraintError\"){\n                    toastr.error(\"Font Size already exists\");\n                }else{\n                    toastr.error(props.fontSize.response.message)\n                }\n            }\n        }\n    }\n    editFont(e, font){\n        e.preventDefault();\n        this.setState({fields : font,openPopup : !this.state.openPopup, isEdit: true});\n    }\n    displayRows() {\n        const fontSizes = this.state.fontSizes;\n        let fontRows = <NoRecord isFetching={this.state.fontSizes.isFetching} colspan=\"10\" />;\n        if (fontSizes.length > 0) {\n            fontRows = fontSizes.map((font, index) => {\n                var status = (font.status == 1) ? true : false;\n                return <tr key={index}>\n                    <td>{font.font_size}</td>\n                    <td>\n                        <Switchtoggle  {...this.props} \n                            value={status}\n                            fieldName={'status'}\n                            id={font.font_id}\n                            onChange={(e) => { this.grid.statusUpdate({ url: \"changeStatus\", actionType: FONT_SIZE_STATUS_UPDATE, params: font, modelName: \"promize_font_size\", PKey: \"font_size_id\" }, e) }}\n                            spanLabel={{ first: 'Active', second: 'InActive' }}\n                            checkValue={{ first: true, second: false }}\n                        />\n                    </td>\n                    <td>\n                        <div className=\"table-actions\">\n                            <button className=\"btn-tbl edit\" onClick={(e) => this.editFont(e,font)}><i className=\"fa fa-pencil-alt\"></i></button>\n                            <button className=\"btn-tbl delete\" onClick={(e) => this.table.delete.handleToogleModal({ id: font.font_size_id, idKey: 'ids', url: 'deleteRecord', actionType: FONT_SIZE_DELETE, modelName: \"promize_font_size\", PKey: \"font_size_id\" }, e)}><i className=\"fa fa-trash-alt\"></i></button>\n                        </div>\n                    </td>\n                </tr>\n            })\n        }\n        return fontRows;\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setData(nextProps);\n    }\n    enablePopup = () =>{\n        let fields = {\n            font_size : null,\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields, openPopup : !this.state.openPopup, isEdit : false})\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                    {this.state.openPopup && <div>\n                       <Forms {...this} font={this.font} title={this.state.isEdit ? \"Edit Font Size\" : \"Add Font Size\"} enablePopup={this.enablePopup} currentComponent = {this}/>\n                    </div>\n                    }\n            <Table\n                ref={instance => { this.table = instance; }}\n                {...this.props} {...this.state}\n                pageTitle=\"Font Size\"\n                addButton={\n                    <button className=\"btn btn-promize-primary\" onClick={this.enablePopup}>\n                        <span>{\"Add\"}</span>\n                    </button>\n                }\n                managementType={FONT_SIZE}\n                grid={this.grid}\n                data={this.props.fontSizes}\n                rowDelete={this.props.fontSizeDelete}\n            >\n                <table className=\"promize-table table-hover table-action\" id=\"fixTable\">\n                    <thead>\n                        <tr>\n                            <th className={(this.grid.sortType) ? ((this.grid.sortType == 'ASC') ? \"sorting-asec\" : \"sorting-desc\") : \"sorting\"} onClick={(e) => this.grid.handleColSorting(e)}>Font Size</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.displayRows()}\n                    </tbody>\n                </table>\n            </Table>\n            </React.Fragment>)\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        fontSizeStatus: state.fontSizeStatus,\n        fontSizeDelete: state.fontSizeDelete,\n        fontSizes: state.fontsizes,\n        fontSize : state.fontsize\n    };\n}\n\nexport default connect(mapStateToProps)(Fontsize);\n","import React from 'react';\n\n /*\n    * State allows React components to change their output over time in response to user actions, \n     *network responses, and anything else, without violating this rule\n     * React elements are plain objects\n     * React DOM compares the element and its children to the previous one, \n     * and only applies the DOM updates necessary to bring the DOM to the desired state\n     * To render a React element into a root DOM node\n     * node whose contents has changed gets updated by React DOM\n    */\nexport const SubmitButton = ({className, text, response}) => {\n            \n    return <React.Fragment>\n                { <button type=\"submit\" className={className}>{text}</button> }\n           </React.Fragment>\n}"],"sourceRoot":""}