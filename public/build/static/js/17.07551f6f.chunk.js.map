{"version":3,"sources":["containers/Clipartsettings/Forms.jsx","containers/Clipartsettings/edit.jsx"],"names":["initialState","fields","domain_id","app","DOMAIN_ID","promize_domain_clipart_category_id","clipart_category_name","clipart_category_code","clipart_category_image","clipart_image_url","imageKey","parent_id","promize_clipart_category_images","status","inputErrors","isEdit","clipart_saved","enableEditClipart","validation","props","Forms","_this","Object","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","closePopup","setState","popup","state","promize_attribute_id","promize_clipart_category_images_id","clipart_name","clipart_code","promize_product_clipart_image","clipart_price","setImageKey","bind","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleUploadedImage","handleFieldChange","handleAddOption","showClipartContentPopup","onChangeHandler","dispatch","getAllCliparts","_this2","response","imageUpload","currentComponent","newObj","assign","file","path","data","saveClipartValues","e","fieldName","preventDefault","obj","target","value","index","undefined","arrayIndex","$","hide","_this3","foundIndex","findIndex","attr_obj","push","hideClipartContentPopup","toastr","error","key","clipartValues","isFetching","isError","records","show","_this4","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","Fragment","className","style","display","_components_form_input__WEBPACK_IMPORTED_MODULE_12__","labelName","onChange","onBlur","handleInputFieldBlur","placeholder","inputType","_components_files_ImageUpload__WEBPACK_IMPORTED_MODULE_17__","callBack","dataName","imageType","image_url","onClick","_this5","promize_clipart_values","splice","deleteClipartValues","ids","clipart_values","map","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","parseInt","save","success","history","_this6","_components_design_Popup__WEBPACK_IMPORTED_MODULE_20__","submitButton","cancel","onSubmit","form","handleSubmit","method","cliparts","_components_form_SimpleSelect__WEBPACK_IMPORTED_MODULE_18__","enableEmptyOptionText","optionText","optionValue","name","_components_form_SubmitButton__WEBPACK_IMPORTED_MODULE_14__","text","length","colSpan","src","APP_IMAGE_BASE_URL","alt","editClipartValues","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","to","saveForm","clipartContent","Component","connect","Edit","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","formValidation","clipart","Form","getInstance","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","views","uploadClipartImage","match","params","id","get","newProps","receiveType","JSON","parse","stringify","_","set","message","statusValue","react__WEBPACK_IMPORTED_MODULE_6___default","_components_form_switchtoggle__WEBPACK_IMPORTED_MODULE_12__","spanLabel","first","second","checkValue","_Forms__WEBPACK_IMPORTED_MODULE_10__","reset"],"mappings":"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","file":"static/js/17.07551f6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport $ from 'jquery';\nimport { NavLink } from 'react-router-dom';\nimport _ from 'lodash';\nimport Input from '../../components/form/input';\nimport toastr from 'toastr';\nimport { SubmitButton } from \"../../components/form/SubmitButton\";\nimport noImages from '../../assets/images/no-image.png';\nimport { app } from '../../config/app';\nimport ImageUpload from '../../components/files/ImageUpload';\nimport { SimpleSelect } from \"../../components/form/SimpleSelect\";\nimport {save, saveClipartValues, deleteClipartValues, getAllCliparts } from '../../actions/cliparts';\nimport Popup from '../../components/design/Popup'\n\n\nexport function initialState() {\n    const initialState = {\n        fields:\n        {\n            \"domain_id\": app.DOMAIN_ID,\n            \"promize_domain_clipart_category_id\": null,\n            \"clipart_category_name\": \"\",\n            \"clipart_category_code\": \"\",\n            \"clipart_category_image\":\"\",\n            \"clipart_image_url\":\"\",\n            \"imageKey\":\"\",\n            \"parent_id\":null,\n            \"promize_clipart_category_images\": [],\n            \"status\": true,\n        },\n        inputErrors: {},\n        isEdit: true,\n        clipart_saved: false,\n        enableEditClipart : false\n    };\n\n    return initialState;\n}\nexport const validation = (props) => {\n    const rules = {\n        \"clipart_category_name\": \"required\",\n    }\n    return rules;\n}\n\nclass Forms extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            imageKey: '',\n            promize_clipart_category_images: {\n                \"promize_domain_clipart_category_id\": this.props.state.fields.promize_attribute_id,\n                \"promize_clipart_category_images_id\": null,\n                \"clipart_name\": \"\",\n                \"clipart_code\":\"\",\n                \"promize_product_clipart_image\":\"\",\n                \"clipart_price\": null\n            },\n            popup: false,\n        }\n        this.setImageKey = this.setImageKey.bind(this);\n        this.handleUploadedImage = this.handleUploadedImage.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.handleAddOption = this.handleAddOption.bind(this);\n        this.showClipartContentPopup = this.showClipartContentPopup.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        // this.handleInputFieldBlur = this.handleInputFieldBlur.bind(this);\n    }\n    componentWillMount(){\n            this.props.dispatch(getAllCliparts());\n    }\n    handleUploadedImage(props) {\n        const response = props.imageUpload.response;\n        if (response.status && response.status === 200) {     \n            if (this.state.imageKey == \"clipart_category_image\") {\n                let fields = this.props.currentComponent.state.fields;\n                const newObj = Object.assign({}, fields, {\n                    clipart_image_url: response.file.path,\n                    clipart_category_image:response.file.path\n                });\n                this.props.currentComponent.setState({\n                    fields: newObj\n                })\n        }\n            else if (this.state.imageKey == \"promize_product_clipart_image\"){\n                let fields = this.state.promize_clipart_category_images;\n                const newObj = Object.assign({}, fields, {\n                    promize_product_clipart_image: response.file.path,\n                });\n                this.setState({\n                    promize_clipart_category_images: newObj\n                },()=>{\n                    let data = this.state.promize_clipart_category_images;\n                    this.props.dispatch(saveClipartValues(data))\n                })\n            }\n        }\n    }\n\n    handleFieldChange(e, fieldName) {\n        e.preventDefault();\n        let fields = this.state.promize_clipart_category_images;\n        let obj = fields\n        obj[fieldName] = e.target.value;\n        const newObj = Object.assign({}, fields, obj);\n        fields = newObj;\n        this.setState({ promize_clipart_category_images: fields });\n    }\n    showClipartContentPopup(e, data, index) {\n        e.preventDefault();\n        if (index !== undefined) {\n            const promize_clipart_category_images = this.state.promize_clipart_category_images;\n            data.arrayIndex = index;\n            const newObj = Object.assign({}, promize_clipart_category_images, data);\n            this.setState({ promize_clipart_category_images: newObj });\n        } else {\n            let promize_clipart_category_images = this.state.promize_clipart_category_images;\n            promize_clipart_category_images.promize_domain_clipart_category_id = this.props.state.fields.promize_domain_clipart_category_id\n            this.props.dispatch(saveClipartValues(promize_clipart_category_images));\n        }\n    }\n    hideClipartContentPopup(e) {\n        e && e.preventDefault();\n        $('.promize-modal-cover').hide();\n        const newObj = {\n            \"promize_domain_clipart_category_id\": this.props.state.fields.promize_domain_clipart_category_id,\n            \"promize_clipart_category_images_id\": null,\n            \"clipart_name\": \"\",\n            \"clipart_code\": \"\",\n            \"promize_product_clipart_image\": \"\",\n            \"clipart_price\": null\n        }\n        this.setState({ promize_clipart_category_images: newObj });\n    }\n\n    handleAddOption(e){\n        e.preventDefault();\n        if(this.state.promize_clipart_category_images.clipart_name && this.state.promize_clipart_category_images.promize_product_clipart_image){\n            let fields = this.props.state.fields;\n            let promize_clipart_category_images = fields.promize_clipart_category_images;\n            if(this.state.enableEditClipart){\n                var foundIndex = promize_clipart_category_images.findIndex(attr_obj => attr_obj.promize_clipart_category_images_id == this.state.promize_clipart_category_images.promize_clipart_category_images_id);\n                promize_clipart_category_images[foundIndex] = this.state.promize_clipart_category_images;\n            }else{\n                promize_clipart_category_images.push(this.state.promize_clipart_category_images);\n            }\n            const newObj = Object.assign({}, fields, {          \n                promize_clipart_category_images: promize_clipart_category_images\n            });\n            this.setState({ enableEditClipart:false});\n            this.props.currentComponent.setState({fields: newObj},()=>{\n                this.hideClipartContentPopup();\n            });\n        }else if(!this.state.promize_clipart_category_images.clipart_name){\n            toastr.error(\"Clipart name cannot be empty\")\n        }else if(!this.state.promize_clipart_category_images.promize_product_clipart_image){\n            toastr.error(\"Clipart image cannot be empty\")\n        }\n       \n    }\n    setImageKey(key) {\n        this.setState({ imageKey: key });\n    }\n    componentWillReceiveProps(props) {\n        if (props.imageUpload.response !== this.props.imageUpload.response) {\n            this.handleUploadedImage(props);\n        }else if (!props.clipartValues.isFetching && !props.clipartValues.isError && this.props.clipartValues.isFetching !== props.clipartValues.isFetching) {\n            let records = props.clipartValues.response.records;\n            records.promize_product_clipart_image = this.state.promize_clipart_category_images.promize_product_clipart_image;\n            this.setState({ promize_clipart_category_images: records }, () => {\n                $('.promize-modal-cover').show();\n            });\n        }\n    }\n    handleInputFieldBlur(e) {\n        e.preventDefault();\n        let data = this.state.promize_clipart_category_images;\n        this.props.dispatch(saveClipartValues(data))\n    }\n    clipartContent() {\n        return <React.Fragment>\n            <div className=\"promize-modal-cover\" style={{ \"display\": \"none\" }}>\n                <div className=\"promize-modal modal-sm\">\n                    <div className=\"promize-modal-header\">\n                        <h3 className=\"modal-title\">\n                            <span>\n                                Add New Clipart\n                        </span>\n                        </h3>\n                    </div>\n                    <div className=\"promize-modal-body\">\n                        <div className=\"promize-form-group mt-10\">\n                            <Input {...this.props}\n                                fieldName={'clipart_name'}\n                                value={this.state.promize_clipart_category_images.clipart_name}\n                                labelName={\"Clipart Name\"}\n                                onChange={(e) => { this.handleFieldChange(e, \"clipart_name\") }}\n                                validation={false}\n                                onBlur={e => this.handleInputFieldBlur(e)}\n                                placeholder={' '}\n                            />\n                            <Input {...this.props}\n                                fieldName={'clipart_code'}\n                                value={this.state.promize_clipart_category_images.clipart_code}\n                                labelName={\"Clipart Code\"}\n                                onChange={(e) => { this.handleFieldChange(e, \"clipart_code\") }}\n                                validation={false}\n                                onBlur={e => this.handleInputFieldBlur(e)}\n                                placeholder={' '}\n                            />                            \n                            <Input {...this.props}\n                                fieldName={'price'}\n                                value={this.state.promize_clipart_category_images.clipart_price?this.state.promize_clipart_category_images.clipart_price : ''}\n                                labelName={'Price'}\n                                onChange={(e) => { this.handleFieldChange(e, \"clipart_price\") }}\n                                validation={false}\n                                onBlur={e => this.handleInputFieldBlur(e)}\n                                placeholder={' '}\n                                inputType={'number'}\n                            />\n                            <ImageUpload {...this.props}\n                                setImageKey={this.setImageKey}\n                                callBack={true}\n                                labelName={\"Clipart image\"}\n                                fieldName={'image_file'}\n                                dataName={'image_file'}\n                                validation={false}\n                                imageType={\"promize_product_clipart_image\"}\n                                value={this.state.promize_clipart_category_images.promize_product_clipart_image}\n                                image_url={this.state.promize_clipart_category_images.promize_product_clipart_image}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"promize-modal-footer df df-end\">\n                        <button className=\"btn btn-promize-secondary\" onClick={(e) => { this.hideClipartContentPopup(e) }}>Cancel</button>\n                        <button className=\"btn btn-promize-primary\" onClick={(e) => { this.handleAddOption(e) }}>Add</button>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    }\n    deleteClipartValues(e, index, promize_clipart_category_images_id){\n        e.preventDefault();\n        let popup = {};\n        popup.title = \"Remove Clipart\";\n        popup.content = 'Do you want to remove this clipart?';\n        popup.submit = () => {\n            let fields = this.props.state.fields;\n            let promize_clipart_values = fields.promize_clipart_category_images;\n            promize_clipart_values.splice(index,1);\n            const newObj = Object.assign({}, fields, {          \n                promize_clipart_category_images:  promize_clipart_values \n            });\n            this.props.currentComponent.setState({fields:newObj},()=>{\n                this.props.dispatch(deleteClipartValues({\"ids\" : [promize_clipart_category_images_id]}))\n            });\n        }\n        this.setState({popup})\n        \n    }\n    editClipartValues(e, promize_clipart_category_images_id){\n        e.preventDefault();\n        let promize_clipart_values = this.props.state.fields.promize_clipart_category_images;\n        let clipart_values = {};\n        promize_clipart_values.map((value, index)=>{\n            if(value.promize_clipart_category_images_id == promize_clipart_category_images_id){\n                clipart_values = value;\n            }\n        });\n        this.setState({promize_clipart_category_images : clipart_values, enableEditClipart:true},()=>{\n            $('.promize-modal-cover').show();  \n        }) \n    }\n    onChangeHandler(e){\n        let fields = this.props.state.fields;\n        fields = {\n            ...fields,\n            parent_id : e.target.value ? parseInt(e.target.value) : ''\n        }\n        this.props.currentComponent.setState({fields:fields});\n    }\n\n    saveForm(e) {\n        e.preventDefault();\n        this.props.dispatch(save(this.props.state.fields))\n        toastr.success(\"Records saved successfully\");\n        this.props.history.push('/settings/clipart');\n    }\n    closePopup = () =>{\n        this.setState({popup : false})\n    }\n    render(){\n        return(<React.Fragment>\n            {this.state.popup && <Popup {...this.state.popup} submitButton=\"Remove\" cancel={this.closePopup}/>}\n            <form onSubmit={this.props.form.handleSubmit} method=\"POST\">\n            <div className=\"promize-card-body\">\n                <div className=\"df\">\n                    <div className=\"wd-33 mr-15\">\n                        <Input {...this.props}\n                            fieldName={'clipart_category_name'}\n                            value={this.props.state.fields.clipart_category_name}\n                            labelName={\"Clip Art List Name\"}\n                            validation={true}\n                        />\n                    </div>\n                    <div className=\"wd-33 mr-15\">\n                        <Input {...this.props}\n                            fieldName={'clipart_category_code'}\n                            value={this.props.state.fields.clipart_category_code}\n                            labelName={\"Clip Art List Code\"}\n                            validation={false}\n                        />\n                    </div>\n                {this.props.cliparts.response &&\n                <div className=\"wd-33\">\n                    <SimpleSelect\n                        enableEmptyOptionText = {true}\n                        onChangeHandler={this.onChangeHandler}\n                        data={this.props.cliparts.response ? this.props.cliparts.response.data : []}\n                        optionText=\"clipart_category_name\"\n                        optionValue=\"promize_domain_clipart_category_id\"\n                        value={this.props.state.fields.parent_id}\n                        name=\"Clipart Name\"\n                        labelName=\"Parent Clip Art List\"\n                    />\n                </div>\n                }\n               \n                </div>\n                <div className=\"df\">\n                    <div className=\"wd-33\">\n                    <ImageUpload {...this.props}\n                    setImageKey={this.setImageKey}\n                    callBack={true}\n                    labelName={\"Clip Art List Thumbnail\"}\n                    fieldName={'image_file'}\n                    dataName={'image_file'}\n                    validation={false}\n                    imageType={\"clipart_category_image\"}\n                    value={this.props.state.fields.clipart_category_image}\n                    image_url={this.props.state.fields.clipart_category_image}\n                    />\n                    </div>\n                </div>\n                {!this.props.state.clipart_saved && !this.props.state.fields.parent_id &&  <div className=\"df df-end\"><SubmitButton className=\"btn btn-promize-primary\" text={\"Next\"} response={this.props.state.fields} /></div>}\n                {this.props.state.clipart_saved && !this.props.state.fields.parent_id &&\n                    <React.Fragment>\n                    <div className=\"promize-card-header promize-card-innerheader\">\n                        <div className=\"promize-card-title\">\n                            <h3>\n                                <span>Cliparts</span>\n                            </h3>\n                        </div>\n                        <div className=\"promize-card-action df-end\">\n                            <div className=\"tab-links\">\n                                <button className=\"btn btn-links\" onClick={(e) => { this.showClipartContentPopup(e) }}><i className=\"fa fa-plus\"></i> Add New Clipart</button>\n                            </div>\n                        </div>\n                    </div> \n                    <table className=\"promize-table table-hover table-action\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Code</th>\n                                <th>Image</th>\n                                <th>Price ($)</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.props.state.fields.promize_clipart_category_images.length == 0 &&\n                                <tr><td colSpan=\"7\"><p className=\"promize-no-records\"> No records found</p></td></tr>\n                            }\n                            {this.props.state.fields.promize_clipart_category_images.length > 0 && this.props.state.fields.promize_clipart_category_images.map((data, index) => {\n                                return <tr key={index}>\n                                    <td>{data.clipart_name}</td>\n                                    <td>{data.clipart_code}</td>\n                                    <td><div className=\"promize-tbl-mi-cvr\"><img src={app.APP_IMAGE_BASE_URL + data.promize_product_clipart_image} className=\"promize-tbl-img-sm\" alt={\" \"} /></div></td>\n                                    <td>{data.clipart_price}</td>\n                                    <td>\n                                        <div className = \"table-actions\">\n                                            <button className = \"btn-tbl edit\"  onClick={(e) => {this.editClipartValues(e, data.promize_clipart_category_images_id) }}><i className = \"fa fa-pencil-alt\"></i></button>\n                                            <button className = \"btn-tbl delete\" onClick={(e) => {this.deleteClipartValues(e, index, data.promize_clipart_category_images_id) }}><i className = \"fa fa-trash-alt\"></i></button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </table>\n                </React.Fragment>}            \n                <div className=\"df df-end\">{(this.props.state.clipart_saved || this.props.state.fields.parent_id) &&\n                    <div className=\"promize-footer-actions\">\n                        <NavLink to=\"/settings/clipart\" className=\"btn btn-promize-secondary\">{\"Cancel\"}</NavLink>\n                        <button className=\"btn btn-promize-primary\" onClick={(e) => { this.saveForm(e) }}>{\"Save\"}</button>\n                    </div>\n                }\n                </div>\n                </div> { this.clipartContent() }\n                </form>\n                </React.Fragment> \n            )\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        imageUpload: state.imageUpload,\n        clipartValues: state.clipartValues,\n        cliparts : state.cliparts\n    };\n}\n\n\nexport default connect(mapStateToProps)(Forms);","import React, { Component } from 'react';\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport Forms, { initialState, validation } from './Forms';\nimport { save, uploadClipartImage, get } from '../../actions/cliparts';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Form from '../../utility/Form';\n\nclass Edit extends Component {\n\n    constructor(props){\n        super(props);\n        this.isEdit = true;\n        const formValidation = validation(props);\n        this.clipart = Form.getInstance(\n            this, formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields))\n            },\n            (views) => {\n                this.props.dispatch(uploadClipartImage(views, 'clipart_image', 'imageUpload'))\n            },\n            {}\n        );\n\n        this.state = initialState();\n        this.initialState = initialState();\n    }\n\n    componentDidMount(){\n        if(this.props.match.params.id){\n            this.props.dispatch(get(this.props.match.params.id));\n        }\n    }\n    \n    componentWillReceiveProps(newProps) {\n        if(!newProps.clipart.isFetching && !newProps.clipart.isError){\n            if(newProps.clipart.response.data && newProps.clipart.receiveType === 'editData'){\n                if(this.state.isEdit && this.props.match.params.id){\n                    this.setState({isEdit:false});\n                    let fields = JSON.parse(JSON.stringify(newProps.clipart.response.data));\n                    fields = _.set(fields, 'promize_domain_clipart_category_id', parseInt(this.props.match.params.id));\n                    let promize_clipart_category_images = newProps.clipart.response.data.promize_clipart_category_images;\n                    fields = _.set(fields, 'promize_clipart_category_images',promize_clipart_category_images);\n                    this.initialState = {fields:fields};\n                    this.setState({clipart_saved : true,fields:fields});\n                }\n            }else if(newProps.clipart.receiveType === 'postData'){\n                toastr.success(newProps.clipart.response.message);\n                newProps.history.push('/attributes');\n            }\n        }\n   }\n\n    render() {\n        const { clipart } = this.props;\n        let statusValue = (this.state.fields.status == 1) ? true : false;\n        return(   <React.Fragment>\n            <div className=\"promize-card\">\n                <div className=\"promize-card-header\">\n                    <div className=\"promize-card-title mb-10\">\n                        <h3>\n                            <span>Edit Clip Art Category</span>\n                        </h3>\n                    </div>\n                    <div className=\"promize-card-action df-end\">\n                        <Switchtoggle {...this.props} form={this.clipart}\n                            labelName={'Status'}\n                            fieldName={'status'}\n                            dataName={'status'}\n                            id={1}\n                            value={statusValue}\n                            spanLabel={{ first: \"Active\", second: \"Inactive\" }}\n                            checkValue={{ first: true, second: false }}\n                            validation={false} />\n                    </div>\n                </div>\n                <Forms {...this.props} currentComponent={this} form={this.clipart} clipart={clipart} state={this.state} reset={this.initialState} isEdit={true}/>\n            </div> \n        </React.Fragment> \n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { clipart } = state;\n    return {\n        clipart,\n    };\n}\n\nexport default connect(mapStateToProps)(Edit);\n"],"sourceRoot":""}