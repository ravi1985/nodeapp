{"version":3,"sources":["actions/fontsize/index.jsx","containers/Fontsize/form.jsx","containers/Fontsize/index.jsx","components/form/SubmitButton.jsx"],"names":["save","data","method","url","Object","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","font_size","parseInt","modelName","idKey","font_size_id","created_date","updated_date","types","concat","FONT_SIZE","PENDING","FULFILLED","REJECTED","payload","receiveType","getAllFontSizes","domain_id","app","DOMAIN_ID","FONT_SIZES","validation","props","Forms","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","onSubmit","font","handleSubmit","input","assign","form","fieldName","value","state","fields","labelName","inputType","onClick","enablePopup","SubmitButton","text","response","Component","Fontsize","_this","status","setState","openPopup","displayRows","bind","assertThisInitialized","filters","searchVal","searchKey","fontSizes","inputErrors","formValidation","grid","Grid","getInstance","currentComponent","actionType","Form","dispatch","resetForm","getRecords","_this2","_this3","sizeResponse","fontSize","isFetching","keys","length","isError","toastr","success","message","error","e","preventDefault","_this4","fontRows","NoRecord","colspan","map","index","key","switchtoggle","id","font_id","onChange","statusUpdate","FONT_SIZE_STATUS_UPDATE","params","PKey","spanLabel","first","second","checkValue","editFont","table","delete","handleToogleModal","FONT_SIZE_DELETE","nextProps","setData","_this5","Fragment","Fontsize_form","Table","ref","instance","pageTitle","addButton","managementType","rowDelete","fontSizeDelete","sortType","handleColSorting","connect","fontSizeStatus","fontsizes","fontsize","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref","type"],"mappings":"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","file":"static/js/13.808d4113.chunk.js","sourcesContent":["import { FONT_SIZE,FONT_SIZES,PENDING, FULFILLED, REJECTED } from \"../../utility/constants\";\nimport { app } from \"../../config/app\";\n\nexport function save(data) {\n    let method = 'POST', url = \"createRecord\";\n    data = {\n        ...data,\n        font_size : parseInt(data.font_size),\n        modelName: \"promize_font_size\",\n        idKey: \"font_size_id\"\n    }\n    if (data.font_size_id) {\n        method = 'PUT';\n        url = 'updateRecord'\n        delete data.created_date;\n        delete data.updated_date;\n    }\n    return {\n        types: [`${FONT_SIZE}_${PENDING}`, `${FONT_SIZE}_${FULFILLED}`, `${FONT_SIZE}_${REJECTED}`],\n        method: method,\n        url: url,\n        data: data,\n        payload: { receiveType: 'postData' }\n    }\n}\n\nexport function getAllFontSizes() {\n    let data = {\n        modelName: \"promize_font_size\",\n        idKey: \"font_size_id\",\n        domain_id: app.DOMAIN_ID\n    }\n    const request = {\n        types: [`${FONT_SIZES}_${PENDING}`, `${FONT_SIZES}_${FULFILLED}`, `${FONT_SIZES}_${REJECTED}`],\n        method: 'POST',\n        url: 'getAllRecords',\n        data: data,\n    }\n\n    return request;\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport Input from '../../components/form/input';\nimport { SubmitButton } from \"../../components/form/SubmitButton\";\nimport { app } from '../../config/app';\n\nexport function initialState () {\n     const initialState = {\n            filters: {\n                domain_id: app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_font_size',\n                searchKey: 'font_size',\n                idKey: 'font_size_id'\n            },\n            fields :{\n                font_size : null,\n                domain_id : app.DOMAIN_ID,\n                status : 1\n            },\n            fontSizes: [],\n            inputErrors:{},\n        }\n    return initialState;\n}\n\nexport const validation = (props) => {\n    const rules = {\n        \"font_size\":\"required\",\n    }\n    return rules;\n}\nclass Forms extends Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n        return <div className=\"promize-modal-cover\">\n        <div className=\"promize-modal modal-sm\">\n            <div className=\"promize-modal-header\">\n                <h3 className=\"modal-title\">\n                    <span>\n                        Add Font Size\n                    </span>\n                </h3>\n            </div>\n            <div className=\"promize-modal-body\">\n               <form onSubmit={this.props.font.handleSubmit}  method=\"POST\">\n                    {/* <div className=\"df\"> */}\n                        <div className=\"wd-100\">\n                            <Input {...this.props} form ={this.props.font}\n                                fieldName = {'font_size'}\n                                value={this.props.state.fields.font_size ? this.props.state.fields.font_size : ''}\n                                labelName={\"Font Size\"}\n                                validation={false}\n                                inputType={'number'}\n                            /> \n                        </div>\n                        <div className=\"wd-100 df df-end\">\n                        <button  className=\"btn btn-promize-secondary\" onClick={this.props.enablePopup}>Cancel</button>\n                        <SubmitButton className=\"btn btn-promize-primary\" text={\"Save\"} response={this.props.state.fields} />  \n                        {/* </div> */}\n                    </div>    \n                </form>\n            </div>\n        </div>\n    </div>\n    }\n}\n\n\nexport default Forms","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { app } from '../../config/app';\nimport Grid from '../../utility/grid';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Table from '../../components/grid/Table';\nimport NoRecord from '../../components/grid/NoRecord';\nimport { FONT_SIZES, FONT_SIZE, FONT_SIZE_DELETE, FONT_SIZE_STATUS_UPDATE } from \"../../utility/constants\";\nimport Form from '../../utility/Form';\nimport { save } from '../../actions/fontsize';\nimport Forms, { initialState, validation } from \"./form\";\nimport toastr from 'toastr';\n\n\nclass Fontsize extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            openPopup : false\n        }\n        this.displayRows = this.displayRows.bind(this);\n        this.state = initialState();\n        const formValidation = validation();\n        this.grid = Grid.getInstance({ currentComponent: this, url: 'getListsWithPagination', actionType: FONT_SIZES, method: 'POST' });\n\n        this.font = Form.getInstance(\n            this,formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields));\n                this.resetForm();\n\n            },\n            {},\n            {}\n        );   \n    }\n    initialState(){\n        return {\n            filters: {\n                domain_id: app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_font_size',\n                searchKey: 'font_size',\n                idKey: 'font_size_id'\n            },\n            fontSizes: [],\n        }\n    }\n\n    componentDidMount() {\n        this.grid.getRecords();\n    }\n    resetForm(){\n        let fields = {\n            font_size : null,\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields},()=>{\n            this.grid.getRecords();\n        })\n    }\n\n    setData(props) {\n        const response = props.fontSizes.response;\n        const sizeResponse = props.fontSize.response\n        if (response !== this.props.fontSizes.response) {\n            if (!props.fontSizes.isFetching  && response.data && Object.keys(response.data).length > 0 && response.status && response.status === 200) {\n                this.setState({ fontSizes: response.data || [], openPopup : false });\n            }\n            else if (!props.fontSizes.isFetching && props.fontSizes.isError) {\n                this.setState({ fontSizes: [] });\n            }\n        }\n        if (sizeResponse !== this.props.fontSize.response) {\n            if (!props.fontSize.isFetching && response.data && Object.keys(response.data).length > 0 &&response.status && response.status === 200) {\n                toastr.success(props.fontSize.response.message)\n                this.setState({ openPopup : false },()=>{\n                    this.resetForm()\n                });\n            }\n            else if (!props.fontSize.isFetching && props.fontSize.isError) {\n                toastr.error(props.fontSize.response.message)\n            }\n        }\n    }\n    editFont(e, font){\n        e.preventDefault();\n        this.setState({fields : font,openPopup : !this.state.openPopup});\n    }\n    displayRows() {\n        const fontSizes = this.state.fontSizes;\n        let fontRows = <NoRecord isFetching={this.state.fontSizes.isFetching} colspan=\"10\" />;\n        if (fontSizes.length > 0) {\n            fontRows = fontSizes.map((font, index) => {\n                var status = (font.status == 1) ? true : false;\n                return <tr key={index}>\n                    <td>{font.font_size}</td>\n                    <td>\n                        <Switchtoggle  {...this.props} \n                            value={status}\n                            fieldName={'status'}\n                            id={font.font_id}\n                            onChange={(e) => { this.grid.statusUpdate({ url: \"changeStatus\", actionType: FONT_SIZE_STATUS_UPDATE, params: font, modelName: \"promize_font_size\", PKey: \"font_size_id\" }, e) }}\n                            spanLabel={{ first: 'Active', second: 'InActive' }}\n                            checkValue={{ first: true, second: false }}\n                        />\n                    </td>\n                    <td>\n                        <div className=\"table-actions\">\n                            <button className=\"btn-tbl edit\" onClick={(e) => this.editFont(e,font)}><i className=\"fa fa-pencil-alt\"></i></button>\n                            <button className=\"btn-tbl delete\" onClick={(e) => this.table.delete.handleToogleModal({ id: font.font_size_id, idKey: 'ids', url: 'deleteRecord', actionType: FONT_SIZE_DELETE, modelName: \"promize_font_size\", PKey: \"font_size_id\" }, e)}><i className=\"fa fa-trash-alt\"></i></button>\n                        </div>\n                    </td>\n                </tr>\n            })\n        }\n        return fontRows;\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setData(nextProps);\n    }\n    enablePopup = () =>{\n        let fields = {\n            font_size : null,\n            domain_id : app.DOMAIN_ID,\n            status : 1\n        }\n        this.setState({fields, openPopup : !this.state.openPopup})\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                    {this.state.openPopup && <div>\n                       <Forms {...this} font={this.font} enablePopup={this.enablePopup} currentComponent = {this}/>\n                    </div>\n                    }\n            <Table\n                ref={instance => { this.table = instance; }}\n                {...this.props} {...this.state}\n                pageTitle=\"Fonts\"\n                addButton={\n                    <button className=\"btn btn-promize-primary\" onClick={this.enablePopup}>\n                        <span>{\"Add\"}</span>\n                    </button>\n                }\n                managementType={FONT_SIZE}\n                grid={this.grid}\n                data={this.props.fontSizes}\n                rowDelete={this.props.fontSizeDelete}\n            >\n                <table className=\"promize-table table-hover table-action\" id=\"fixTable\">\n                    <thead>\n                        <tr>\n                            <th className={(this.grid.sortType) ? ((this.grid.sortType == 'ASC') ? \"sorting-asec\" : \"sorting-desc\") : \"sorting\"} onClick={(e) => this.grid.handleColSorting(e)}>Font Size</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.displayRows()}\n                    </tbody>\n                </table>\n            </Table>\n            </React.Fragment>)\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        fontSizeStatus: state.fontSizeStatus,\n        fontSizeDelete: state.fontSizeDelete,\n        fontSizes: state.fontsizes,\n        fontSize : state.fontsize\n    };\n}\n\nexport default connect(mapStateToProps)(Fontsize);\n","import React from 'react';\n\n /*\n    * State allows React components to change their output over time in response to user actions, \n     *network responses, and anything else, without violating this rule\n     * React elements are plain objects\n     * React DOM compares the element and its children to the previous one, \n     * and only applies the DOM updates necessary to bring the DOM to the desired state\n     * To render a React element into a root DOM node\n     * node whose contents has changed gets updated by React DOM\n    */\nexport const SubmitButton = ({className, text, response}) => {\n            \n    return <React.Fragment>\n                { <button type=\"submit\" className={className}>{text}</button> }\n           </React.Fragment>\n}"],"sourceRoot":""}