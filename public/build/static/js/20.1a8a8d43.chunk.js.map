{"version":3,"sources":["containers/Attributes/edit.jsx"],"names":["Edit","props","_this","Object","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","isEdit","formValidation","validation","attribute","Form","getInstance","_var_www_html_v3_productimze_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","fields","dispatch","save","views","uploadOptionImage","textValues","state","initialState","viewList","match","params","id","get","newProps","isFetching","isError","response","data","receiveType","setState","JSON","parse","stringify","_","set","parseInt","promize_attribute_id","promize_attr_values_list","promize_attribute_values","promize_attr_clipart_values_list","promize_attribute_clipart_values","promize_attr_image_values_list","promize_attribute_image_values","promize_attr_text_values_list","promize_attribute_text_values","promize_attr_values","length","map","promize_attr_value","index","promize_images","img_data","img_index","image_type","option_thumbnail_image","clipart","attribute_saved","toastr","success","message","history","push","statusValue","status","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_Forms__WEBPACK_IMPORTED_MODULE_11__","assign","currentComponent","title","form","reset","Component","connect"],"mappings":"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","file":"static/js/20.1a8a8d43.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport Form from '../../utility/Form';\nimport Forms,{initialState,validation} from './Forms';\nimport { save, get, uploadOptionImage} from '../../actions/attributes';\n\nclass Edit extends Component {\n\n    constructor(props){\n        super(props);\n        this.isEdit = true;\n        const formValidation = validation(props);\n        this.attribute = Form.getInstance(\n                this,formValidation,\n                (fields) => {\n                    this.props.dispatch(save(fields))\n                },\n                //file upload\n                (views) => {\n                    this.props.dispatch(uploadOptionImage(views, 'option_image', 'imageUpload'))\n                },\n                {}\n            );\n        this.textValues = Form.getInstance(\n            this, formValidation,\n            (fields) => {\n                this.props.dispatch(save(fields))\n            },\n            {}\n        );        \n        this.state = initialState();\n        this.state.viewList = [];\n        this.initialState = initialState();\n    }\n\n    componentDidMount(){\n        if(this.props.match.params.id){\n            this.props.dispatch(get(this.props.match.params.id));\n        }\n    }\n    \n    componentWillReceiveProps(newProps) {\n        if (!newProps.attribute.isFetching && !newProps.attribute.isError && newProps.attribute.isFetching !== this.props.attribute.isFetching){\n            if(newProps.attribute.response.data && newProps.attribute.receiveType === 'editData'){\n                if(this.state.isEdit && this.props.match.params.id){\n                    this.setState({isEdit:false});\n                    let fields = JSON.parse(JSON.stringify(newProps.attribute.response.data));\n                    fields = _.set(fields, 'promize_attribute_id', parseInt(fields.promize_attribute_id));\n                    let promize_attr_values_list = newProps.attribute.response.data.promize_attribute_values;\n                    let promize_attr_clipart_values_list = newProps.attribute.response.data.promize_attribute_clipart_values;\n                    let promize_attr_image_values_list = newProps.attribute.response.data.promize_attribute_image_values;\n                    let promize_attr_text_values_list = newProps.attribute.response.data.promize_attribute_text_values;\n                    let promize_attr_values = [];\n                    if(promize_attr_values_list.length > 0){\n                        promize_attr_values_list.map((promize_attr_value, index)=>{\n                            promize_attr_values[index] = {};\n                            promize_attr_values[index] = promize_attr_value;\n                            promize_attr_value.promize_images.length > 0 && promize_attr_value.promize_images.map((img_data, img_index)=>{\n                                if(img_data.image_type == 'option_thubnail_image'){\n                                    promize_attr_values[index].option_thumbnail_image = img_data;\n                                }\n                            })\n                        })\n                        fields = _.set(fields, 'promize_attribute_values',promize_attr_values);\n                    }else if(promize_attr_clipart_values_list.length > 0){\n                        let clipart = {}\n                        clipart = promize_attr_clipart_values_list[0];\n                        fields = _.set(fields, 'promize_attribute_clipart_values',clipart);\n                    }else if(promize_attr_image_values_list.length > 0){\n                        fields = _.set(fields, 'promize_attribute_image_values',promize_attr_image_values_list[0]);\n                    } else if (promize_attr_text_values_list.length > 0){\n                        let promize_attribute_text_values = promize_attr_text_values_list[0];\n                        fields = _.set(fields, 'promize_attribute_text_values', promize_attribute_text_values);\n                    }\n                    this.initialState = {fields:fields};\n                    this.setState({attribute_saved : true,fields:fields});\n                }\n            }else if(newProps.attribute.receiveType === 'postData'){\n                toastr.success(newProps.attribute.response.message);\n                newProps.history.push('/attributes');\n            }\n        }\n   }\n\n    render() {\n        const { attribute } = this.props;\n        let statusValue = (this.state.fields.status == 1) ? true : false;\n        return <Forms {...this.props} currentComponent={this} title={\"Edit Attribute\"} form={this.attribute} attribute={attribute} state={this.state} reset={this.initialState} isEdit={true} statusValue={statusValue}/>\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { attribute} = state;\n    return {\n        attribute\n    };\n}\n\nexport default connect(mapStateToProps)(Edit);\n"],"sourceRoot":""}