{"version":3,"sources":["containers/Clipartsettings/index.jsx","actions/cliparts/index.jsx"],"names":["Clipartsettings","props","_this","Object","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","displayRows","bind","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","state","initialState","grid","Grid","getInstance","currentComponent","url","actionType","CLIPARTS","method","filters","domain_id","app","DOMAIN_ID","searchVal","modelName","searchKey","idKey","cliparts","getRecords","response","isFetching","data","keys","length","status","setState","isError","_this2","clipartRows","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_grid_NoRecord__WEBPACK_IMPORTED_MODULE_13__","colspan","map","clipart","index","key","className","src","APP_IMAGE_BASE_URL","clipart_category_image","alt","clipart_category_name","_components_form_switchtoggle__WEBPACK_IMPORTED_MODULE_11__","assign","value","fieldName","id","promize_clipart_id","onChange","e","statusUpdate","CLIPART_STATUS_UPDATE","params","PKey","spanLabel","first","second","checkValue","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","promize_domain_clipart_category_id","onClick","table","delete","handleToogleModal","CLIPART_DELETE","nextProps","setData","_this3","_components_grid_Table__WEBPACK_IMPORTED_MODULE_12__","ref","instance","pageTitle","addButton","managementType","CLIPART","rowDelete","clipartDelete","sortType","handleColSorting","Component","connect","clipartStatus","save","_var_www_html_productimize_react_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","created_date","updated_date","types","concat","PENDING","FULFILLED","REJECTED","payload","receiveType","saveClipartValues","promize_clipart_category_images_id","CLIPART_VALUES","get","getAllCliparts","uploadClipartImage","file","typeName","name","formData","FormData","append","IMAGE_UPLOAD","requestBodyType","deleteClipartValues","CLIPART_VALUES_DELETE"],"mappings":"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","file":"static/js/14.7beac140.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { app } from '../../config/app';\nimport Grid from '../../utility/grid';\nimport Switchtoggle from '../../components/form/switchtoggle';\nimport Table from '../../components/grid/Table';\nimport NoRecord from '../../components/grid/NoRecord';\nimport { changeStatus } from '../../actions/cliparts';\nimport { CLIPARTS, CLIPART, CLIPART_DELETE, CLIPART_STATUS_UPDATE } from \"../../utility/constants\";\nclass Clipartsettings extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.displayRows = this.displayRows.bind(this);\n        this.state = this.initialState();\n        this.grid = Grid.getInstance({ currentComponent: this, url: 'getListsWithPagination', actionType: CLIPARTS, method: 'POST' });\n    }\n    initialState() {\n        return {\n            filters: {\n                domain_id: this.props.app.DOMAIN_ID,\n                searchVal: '',\n                modelName: 'promize_domain_clipart_category',\n                searchKey: 'clipart_category_name',\n                idKey: 'promize_domain_clipart_category_id'\n            },\n            cliparts: [],\n        }\n    }\n\n    componentDidMount() {\n        this.grid.getRecords();\n    }\n\n    setData(props) {\n        const response = props.cliparts.response;\n        if (response !== this.props.cliparts.response) {\n            if (!props.cliparts.isFetching  && response.data && Object.keys(response.data).length > 0 && response.status && response.status === 200) {\n                this.setState({ cliparts: response.data || [] });\n            }\n            else if (!props.cliparts.isFetching && props.cliparts.isError) {\n                this.setState({ cliparts: [] });\n            }\n        }\n    }\n    displayRows() {\n        const cliparts = this.state.cliparts;\n        let clipartRows = <NoRecord isFetching={this.props.cliparts.isFetching} colspan=\"10\" />;\n        if (cliparts.length > 0) {\n            clipartRows = cliparts.map((clipart, index) => {\n                var status = (clipart.status == 1) ? true : false;\n                return <tr key={index}>\n                    <td><div className=\"promize-tbl-mi-cvr\"><img src={app.APP_IMAGE_BASE_URL + clipart.clipart_category_image} className=\"promize-tbl-img-sm\" alt={\" \"} /></div></td>\n                    <td>{clipart.clipart_category_name}</td>\n                    <td>\n                        <Switchtoggle  {...this.props}\n                            value={status}\n                            fieldName={'status'}\n                            id={clipart.promize_clipart_id}\n                            onChange={(e) => { this.grid.statusUpdate({ url: \"changeStatus\", actionType: CLIPART_STATUS_UPDATE, params: clipart, modelName:\"promize_domain_clipart_category\",PKey:\"promize_domain_clipart_category_id\",}, e) }}\n                            spanLabel={{ first: 'Active', second: 'InActive' }}\n                            checkValue={{ first: true, second: false }}\n                        />\n                    </td>\n                    <td>\n                        <div className=\"table-actions\">\n                            <NavLink className=\"btn-tbl edit\" to={\"/settings/clipart/edit/\" + clipart.promize_domain_clipart_category_id}><i className=\"fa fa-pencil-alt\"></i></NavLink>\n                            <button className=\"btn-tbl delete\" onClick={(e) => this.table.delete.handleToogleModal({ id: clipart.promize_domain_clipart_category_id, modelName:\"promize_domain_clipart_category\",PKey:\"promize_domain_clipart_category_id\", idKey: 'ids', url: 'deleteRecord', actionType: CLIPART_DELETE }, e)}><i className=\"fa fa-trash-alt\"></i></button>\n                        </div>\n                    </td>\n                </tr>\n            })\n        }\n        return clipartRows;\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setData(nextProps);\n    }\n    render() {\n        return (\n            <Table\n                ref={instance => { this.table = instance; }}\n                {...this.props} {...this.state}\n                pageTitle=\"Clip Art List\"\n                addButton={\n                    <NavLink className=\"btn btn-promize-primary\" to=\"/settings/clipart/add\">\n                        <span>{\"Add\"}</span>\n                    </NavLink>\n                }\n                managementType={CLIPART}\n                grid={this.grid}\n                data={this.props.cliparts}\n                rowDelete={this.props.clipartDelete}\n            >\n                <table className=\"promize-table table-hover table-action\" id=\"fixTable\">\n                    <thead>\n                        <tr>\n                            <th>Image</th>\n                            <th className={(this.grid.sortType) ? ((this.grid.sortType == 'ASC') ? \"sorting-asec\" : \"sorting-desc\") : \"sorting\"} onClick={(e) => this.grid.handleColSorting(e)}>Category</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.displayRows()}\n                    </tbody>\n                </table>\n            </Table>)\n        \n    }\n}\n\nexport default connect((state) => {\n    return {\n        clipartStatus: state.clipartStatus,\n        clipartDelete: state.clipartDelete,\n        cliparts: state.cliparts,\n    };\n})(Clipartsettings);\n","import { CLIPART, CLIPARTS, CLIPART_VALUES, CLIPART_DELETE, CLIPART_VALUES_DELETE, IMAGE_UPLOAD, PENDING, FULFILLED, REJECTED } from \"../../utility/constants\";\nimport { app } from \"../../config/app\";\n\nexport function save(data) {\n    let method = 'POST', url='createRecord';\n\n    data = {\n        ...data,\n        status : true ? 1 : 0,\n        modelName: \"promize_domain_clipart_category\",\n        idKey: \"promize_domain_clipart_category_id\"\n    }\n    if (data.promize_domain_clipart_category_id) {\n        method = 'PUT';\n        url = 'updateRecord';\n        delete data.created_date;\n        delete data.updated_date;\n    }\n    return {\n        types: [`${CLIPART}_${PENDING}`, `${CLIPART}_${FULFILLED}`, `${CLIPART}_${REJECTED}`],\n        method: method,\n        url: url,\n        data: data,\n        payload: { receiveType: 'postData' }\n    }\n}\nexport function saveClipartValues(data) {\n    let method = 'POST', url = 'createRecord';\n    data = {\n        ...data,\n        modelName: \"promize_clipart_category_images\",\n        idKey: \"promize_clipart_category_images_id\"\n    }\n    if (data.promize_clipart_category_images_id) {\n        method = 'PUT';\n        url = 'updateRecord';\n        delete data.created_date;\n        delete data.updated_date;\n    }\n    return {\n        types: [`${CLIPART_VALUES}_${PENDING}`, `${CLIPART_VALUES}_${FULFILLED}`, `${CLIPART_VALUES}_${REJECTED}`],\n        method: method,\n        url: url,\n        data: data,\n        payload: { receiveType: 'postData' }\n    }\n}\nexport function get(id) {\n    const method = 'GET';\n    return {\n        types: [`${CLIPART}_${PENDING}`, `${CLIPART}_${FULFILLED}`, `${CLIPART}_${REJECTED}`],\n        method: method,\n        url: 'getClipartWithPK/' + id,\n        data: {},\n        payload: { receiveType: 'editData' }\n    }\n}\n\nexport function getAllCliparts() {\n    let data = {\n        modelName:\"promize_domain_clipart_category\",\n        idKey:\"promize_domain_clipart_category_id\",\n        domain_id : app.DOMAIN_ID\n    }\n    const request = {\n        types: [`${CLIPARTS}_${PENDING}`, `${CLIPARTS}_${FULFILLED}`, `${CLIPARTS}_${REJECTED}`],\n        method: 'POST',\n        url: 'getAllRecords',\n        data: data,\n    }\n\n    return request;\n}\n\nexport function getClipartLists() {\n    const request = {\n        types: [`${CLIPARTS}_${PENDING}`, `${CLIPARTS}_${FULFILLED}`, `${CLIPARTS}_${REJECTED}`],\n        method: 'GET',\n        url: 'getAttributeLists/' + app.DOMAIN_ID,\n    }\n\n    return request;\n}\n\nexport function uploadClipartImage(file, typeName, name) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', typeName);\n    return {\n        types: [`${IMAGE_UPLOAD}_${PENDING}`, `${IMAGE_UPLOAD}_${FULFILLED}`, `${IMAGE_UPLOAD}_${REJECTED}`],\n        method: 'POST',\n        requestBodyType: 'FormData',\n        url: 'uploadClipartImage',\n        data: formData,\n        payload: { receiveType: 'postData' }\n    }\n}\nexport function deleteClipartValues(data){\n    data = {\n        ...data,\n        modelName:\"promize_clipart_category_images\",\n        idKey:\"promize_clipart_category_images_id\"\n    }\n\tif(data.promize_clipart_category_images_id){\n        delete data.created_date;\n        delete data.updated_date;\n\t}\n    return {\n        types: [`${CLIPART_VALUES_DELETE}_${PENDING}`, `${CLIPART_VALUES_DELETE}_${FULFILLED}`, `${CLIPART_VALUES_DELETE}_${REJECTED}`],\n        method: 'DELETE',\n        url: 'deleteRecord',\n        data: data,\n        payload: {receiveType:'postData'}\n    }\n}\n\n\nexport function changeStatus(actionDetails){\n\tlet {url, actionType, params} = actionDetails;\n    params.status = (params.status == 1) ? 0 : 1;\n    delete params.created_date;\n    delete params.updated_date;\n    params = {\n        ...params,\n        modelName:\"promize_domain_clipart_category\",\n        idKey:\"promize_domain_clipart_category_id\",\n    }\n\treturn {\n\t\ttypes: [`${actionType}_${PENDING}`, `${actionType}_${FULFILLED}`, `${actionType}_${REJECTED}`],\n\t\tmethod: 'PUT',\n\t\turl: `${url}`,\n\t\tpayload: {},\n\t\tdata: params\n\t}\n}\n"],"sourceRoot":""}